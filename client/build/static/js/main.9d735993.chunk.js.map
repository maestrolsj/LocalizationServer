{"version":3,"sources":["apollo/index.ts","context/UserContext.tsx","pages/Public/Login/gql.ts","hooks/useURLQuery/index.ts","pages/Public/Login/index.tsx","pages/Public/Register/gql.ts","pages/Public/Register/index.tsx","pages/Public/ForgotPassword/index.tsx","pages/Public/RedefinePassword/gql.ts","pages/Public/RedefinePassword/index.tsx","pages/Public/index.tsx","smartComponents/AppBar/index.tsx","pages/Private/ProjectFormModal/gql.ts","pages/Private/ProjectFormModal/index.tsx","pages/Private/Home/gql.ts","components/Breadcrumbs/index.tsx","pages/Private/Home/index.tsx","pages/Private/Settings/index.tsx","pages/Private/Screen/gql.ts","pages/Private/ScreenFormModal/gql.ts","pages/Private/ScreenFormModal/index.tsx","pages/Private/LocaleFormModal/gql.ts","pages/Private/LocaleFormModal/index.tsx","pages/Private/ScreenOptionsModal/index.tsx","pages/Private/Screen/index.tsx","pages/Private/Translate/gql.ts","pages/Private/KeyFormModal/gql.ts","pages/Private/KeyFormModal/index.tsx","pages/Private/TranslationFormModal/gql.ts","pages/Private/TranslationFormModal/index.tsx","pages/Private/Translate/index.tsx","Loading.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["httpLink","createHttpLink","uri","process","authLink","setContext","_","headers","user","JSON","parse","localStorage","getItem","accessToken","authorization","errorLink","onError","graphQLErrors","networkError","forEach","message","locations","path","clear","window","location","href","console","log","client","ApolloClient","link","ApolloLink","from","cache","InMemoryCache","useUserState","createPersistedState","UserContext","React","createContext","setUser","UserProvider","children","Provider","value","gql","useURLQuery","URLSearchParams","useLocation","search","useStyles","makeStyles","theme","root","width","height","display","flexDirection","justifyContent","alignItems","input","margin","password","marginBottom","errorText","color","forgotPassword","textDecoration","cursor","fontSize","palette","primary","main","textAlign","TEST_QUERY","Login","props","classes","useState","email","setEmail","setPassword","setErrorText","useContext","history","useHistory","useApolloClient","query","login","useCallback","e","a","preventDefault","loginQuery","variables","data","redirectUrl","get","push","goTo","url","useEffect","data2","startQuery","onSubmit","className","Typography","TextField","label","placeholder","variant","type","onChange","target","clsx","onClick","Button","successText","Register","firstName","setFirstname","lastName","setLastname","setSuccessText","useMutation","upsertUserMutation","upsertUser","upsertUserLoading","loading","CircularProgress","size","ForgotPassword","sendEmail","axios","post","RedefinePassword","repeatPassword","setRepeatPassword","redefinePasswordMutation","redefinePassword","handleSubmit","token","resetPassword","left","float","right","background","image","filter","RedirectLink","replace","pathname","PublicFrame","exact","component","src","alt","createStyles","flexGrow","menuButton","marginRight","spacing","title","spacer","flex","position","borderRadius","shape","backgroundColor","fade","common","white","marginLeft","breakpoints","up","searchIcon","padding","pointerEvents","inputRoot","inputInput","paddingLeft","transition","transitions","create","CustomAppBar","onSearchChange","AppBar","Toolbar","InputBase","inputProps","IconButton","edge","aria-label","projectsQuery","upsertProjectMutation","validationSchema","yup","key","min","required","name","ProjectFormModal","open","setOpen","id","useRouteMatch","params","refetchQueries","upsertProject","upsertProjectLoading","formik","useFormik","initialValues","description","values","projectLoading","useQuery","skip","onCompleted","setValues","project","Dialog","paper","onClose","onExited","disableBackdropClick","disableEscapeKeyDown","DialogTitle","DialogContent","autoFocus","fullWidth","handleChange","helperText","touched","errors","error","Boolean","multiline","rows","DialogActions","disabled","CustomBreadcrumbs","paths","handleClick","Breadcrumbs","length","i","ind","map","Link","default","addCard","minWidth","boxShadow","border","minHeight","projectsContainer","flexFlow","languageCard","maxHeight","languageCardSkeleton","AddCard","Card","ProjectCard","k","onEditClick","onTranslateClick","CardHeader","Skeleton","animation","action","CardContent","noWrap","CardActions","HomePage","projects","projectsLoading","SettingsPage","screensQuery","upsertScreenMutation","ScreenFormModal","screenId","projectId","upsertScreen","upsertScreenLoading","screenLoading","screen","localesQuery","upsertLocaleMutation","languages","iso","getAllNames","code","getCode","nativeName","getNativeName","LocaleFormModal","localeId","upsertLocale","upsertLocaleLoading","locale","Autocomplete","options","getOptionLabel","option","getOptionSelected","autoSelect","renderInput","item","ScreenOptionsModal","List","ListItem","projectNameContainer","screensContainer","screenChip","maxWidth","addChip","borderStyle","AddChip","Chip","avatar","style","CustomChip","ScreenPage","setSearch","screens","toLowerCase","includes","locales","projectQuery","screenQuery","deleteKeyMutation","keyQuery","upsertKeyMutation","INITIAL_FORM_VALUES","plural","KeyFormModal","createAnother","setCreateAnother","keyId","upsertKey","upsertKeyLoading","resetForm","keyLoading","FormControlLabel","control","Checkbox","checked","translationQuery","upsertTranslationMutation","TranslationFormModal","translationId","upsertTranslation","upsertTranslationLoading","translationLoading","translation","languageField","switchButton","actionsContainer","screenTitle","screenDescription","keyItem","keyTitleContainer","keyTitle","translationsContainer","translationContainer","leftContainer","rightContainer","noTranslation","INITIAL_LANGUAGE","KeyItem","leftTranslation","rightTranslation","rightLanguage","leftLanguage","onKeyClick","onLeftLanguageClick","onRightLanguageClick","onDeleteKey","setLeftLanguage","setRightLanguage","deleteKey","disableClearable","omit","startIcon","keys","reverse","filteredLeftTranslation","translations","x","filteredRightTranslation","progress","LoadingPage","PublicRouter","PrivateRouter","to","Home","Settings","Screen","Translate","App","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","Loading","hostname","match","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"8QAOMA,EAAWC,YAAe,CAC9BC,IAAKC,sCAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAD,EAAdC,EAAc,EAAdA,QAC1BC,EAAOC,KAAKC,MAAL,UAAWC,aAAaC,QAAQ,eAAhC,QAA2C,IACxD,MAAoB,kBAATJ,GACuB,kBAArBA,EAAKK,YACP,CACLN,QAAQ,2BACHA,GADE,IAELO,cAAeN,EAAKK,YAAL,iBAA6BL,EAAKK,aAAgB,MAKlE,CACLN,QAAQ,eACHA,OAKHQ,EAAYC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACtCD,GACFA,EAAcE,SAAQ,YAAmC,IAAhCC,EAA+B,EAA/BA,QAA+B,EAAtBC,UAAsB,EAAXC,KAC3B,sBAAZF,IACFT,aAAaY,QACbC,OAAOC,SAASC,KAAO,QAGzBR,GAAcS,QAAQC,IAAR,2BAAgCV,OASrCW,EANA,IAAIC,IAAa,CAE9BC,KAAMC,IAAWC,KAAK,CAAC7B,EAAUW,EAAWf,IAC5CkC,MAAO,IAAIC,M,iCC1CAC,EAAeC,YAAqB,QAkBpCC,EAAcC,IAAMC,cAAgC,CAC/DhC,KAAM,GACNiC,QAAS,eAGEC,EAA8B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnCP,EAAmB,IADgB,mBACpD5B,EADoD,KAC9CiC,EAD8C,KAE3D,OACE,kBAACH,EAAYM,SAAb,CAAsBC,MAAO,CAAErC,OAAMiC,YAClCE,I,wbC3BQG,UAAf,KCAO,SAASC,IACd,OAAO,IAAIC,gBAAgBC,cAAcC,Q,gHCS3C,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,MAAO,CACLC,OAAQ,EACRP,MAAO,OAETQ,SAAU,CACRC,aAAc,EACdT,MAAO,OAETU,UAAW,CACTC,MAAO,OAGTC,eAAgB,CACdC,eAAgB,OAChBC,OAAQ,UACRC,SAAU,GACVJ,MAAOb,EAAMkB,QAAQC,QAAQC,KAC7BX,OAAQ,QACRY,UAAW,QACXnB,MAAO,MACP,UAAW,CACTa,eAAgB,kBAKhBO,EAAa7B,IAAH,KA2GD8B,EArGc,SAACC,GAC5B,IAAMC,EAAU3B,IADsB,EAEZ4B,mBAAS,IAFG,mBAE/BC,EAF+B,KAExBC,EAFwB,OAGNF,mBAAS,IAHH,mBAG/BhB,EAH+B,KAGrBmB,EAHqB,OAIJH,mBAAS,IAJL,mBAI/Bd,EAJ+B,KAIpBkB,EAJoB,KAK9B1C,EAAY2C,qBAAW9C,GAAvBG,QACF4C,EAAUC,cACVzD,EAAS0D,cACTC,EAAQzC,IAER0C,EAAQC,sBAAW,uCACvB,WAAOC,GAAP,uBAAAC,EAAA,6DACED,EAAEE,iBADJ,kBAG2BhE,EAAO2D,MAAM,CAClCA,MAAOM,EACPC,UAAW,CAAEf,QAAOjB,cAL1B,gBAGYiC,EAHZ,EAGYA,KAKRvD,EAAQ,2BAAKuD,EAAKP,MAAMjF,MAAjB,IAAuBK,YAAamF,EAAKP,MAAM5E,gBAChDoF,EAAcT,EAAMU,IAAI,gBAE5Bb,EAAQc,KAAKF,GAEbZ,EAAQc,KAAK,SAbnB,kDAgBIhB,EAAY,gDAAC,KAAKlE,cAAc,UAApB,aAAC,EAAuBG,eAAxB,QAAmC,IAhBnD,0DADuB,sDAoBvB,CAAC4D,EAAOjB,EAAUtB,EAAS4C,EAASxD,EAAQ2D,IAGxCY,EAAOV,uBACX,SAACW,GACC,OAAO,kBAAMhB,EAAQc,KAAKE,MAE5B,CAAChB,IAWH,OARAiB,qBAAU,YACQ,uCAAG,8BAAAV,EAAA,sEACa/D,EAAO2D,MAAM,CAAEA,MAAOb,IADnC,gBACH4B,EADG,EACTP,KACRrE,QAAQC,IAAI,OAAQ2E,GAFH,2CAAH,qDAIhBC,KACC,IAGD,0BAAMC,SAAUhB,EAAOiB,UAAW5B,EAAQxB,MACxC,kBAACqD,EAAA,EAAD,CAAYD,UAAW5B,EAAQb,WAAYA,GAC3C,kBAAC2C,EAAA,EAAD,CACEF,UAAW5B,EAAQjB,MACnBgD,MAAM,QACNC,YAAY,qBACZC,QAAQ,WACRC,KAAK,QACLnE,MAAOmC,EACPiC,SAAU,SAACtB,GACTV,EAASU,EAAEuB,OAAOrE,OAClBsC,EAAa,OAGjB,kBAACyB,EAAA,EAAD,CACEF,UAAWS,YAAKrC,EAAQjB,MAAOiB,EAAQf,UACvC8C,MAAM,WACNC,YAAY,UACZC,QAAQ,WACRC,KAAK,WACLnE,MAAOkB,EACPkD,SAAU,SAACtB,GACTT,EAAYS,EAAEuB,OAAOrE,OACrBsC,EAAa,OAGjB,kBAACwB,EAAA,EAAD,CACES,QAAShB,EAAK,mBACdM,UAAW5B,EAAQX,gBAFrB,oBAOA,kBAACkD,EAAA,EAAD,CACEL,KAAK,SACLN,UAAW5B,EAAQjB,MACnBkD,QAAQ,YACR7C,MAAM,WAJR,SAQA,kBAACmD,EAAA,EAAD,CACED,QAAShB,EAAK,aACdM,UAAW5B,EAAQjB,MACnBK,MAAM,WAHR,c,6YC7ISpB,UAAf,KCYMK,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,MAAO,CACLC,OAAQ,EACRP,MAAO,OAETQ,SAAU,CACRC,aAAc,EACdT,MAAO,OAET+D,YAAa,CACXpD,MAAO,aAETD,UAAW,CACTC,MAAO,OAGTC,eAAgB,CACdC,eAAgB,OAChBC,OAAQ,UACRC,SAAU,GACVJ,MAAOb,EAAMkB,QAAQC,QAAQC,KAC7BX,OAAQ,QACRY,UAAW,QACXnB,MAAO,MACP,UAAW,CACTa,eAAgB,kBA8GPmD,EAzGkB,SAAC1C,GAChC,IAAMC,EAAU3B,IAD0B,EAEhB4B,mBAAS,IAFO,mBAEnCC,EAFmC,KAE5BC,EAF4B,OAGRF,mBAAS,IAHD,mBAGnCyC,EAHmC,KAGxBC,EAHwB,OAIV1C,mBAAS,IAJC,mBAInC2C,EAJmC,KAIzBC,EAJyB,OAKJ5C,mBAAS,IALL,mBAKnCuC,EALmC,KAKtBM,EALsB,OAMR7C,mBAAS,IAND,mBAMnCd,EANmC,KAMxBkB,EANwB,KAOpCE,EAAUC,cAP0B,EAWtCuC,YAA6CC,GAXP,mBASxCC,EATwC,KAU7BC,EAV6B,KAUtCC,QAGExC,EAAQC,sBAAW,uCACvB,WAAOC,GAAP,iBAAAC,EAAA,6DACED,EAAEE,iBADJ,kBAGUkC,EAAW,CAAEhC,UAAW,CAAEf,QAAOwC,YAAWE,cAHtD,OAIIE,EAAe,yCAJnB,iDAMI,sCAAI,KAAK3G,cAAc,UAAvB,aAAI,EAAuBG,SACzB+D,GACE,2CAAKlE,cAAc,UAAnB,eAAuBG,SAAU,sBAAwB,IAG3D+D,EAAa,gBAXnB,yDADuB,sDAgBvB,CAACH,EAAOwC,EAAWE,EAAUK,IAGzB3B,EAAOV,uBACX,SAACW,GACC,OAAO,kBAAMhB,EAAQc,KAAKE,MAE5B,CAAChB,IAGH,OACE,0BAAMoB,SAAUhB,EAAOiB,UAAW5B,EAAQxB,MACxC,kBAACqD,EAAA,EAAD,CAAYD,UAAW5B,EAAQwC,aAAcA,GAC7C,kBAACX,EAAA,EAAD,CAAYD,UAAW5B,EAAQb,WAAYA,GAC3C,kBAAC2C,EAAA,EAAD,CACEF,UAAW5B,EAAQjB,MACnBgD,MAAM,aACNC,YAAY,OACZC,QAAQ,WACRC,KAAK,OACLnE,MAAO2E,EACPP,SAAU,SAACtB,GACT8B,EAAa9B,EAAEuB,OAAOrE,OACtBsC,EAAa,IACbyC,EAAe,OAGnB,kBAAChB,EAAA,EAAD,CACEF,UAAW5B,EAAQjB,MACnBgD,MAAM,YACNC,YAAY,MACZC,QAAQ,WACRC,KAAK,OACLnE,MAAO6E,EACPT,SAAU,SAACtB,GACTgC,EAAYhC,EAAEuB,OAAOrE,OACrBsC,EAAa,IACbyC,EAAe,OAGnB,kBAAChB,EAAA,EAAD,CACEF,UAAW5B,EAAQjB,MACnBgD,MAAM,QACNC,YAAY,qBACZC,QAAQ,WACRC,KAAK,QACLnE,MAAOmC,EACPiC,SAAU,SAACtB,GACTV,EAASU,EAAEuB,OAAOrE,OAClBsC,EAAa,IACbyC,EAAe,OAGnB,kBAACP,EAAA,EAAD,CACEL,KAAK,SACLN,UAAW5B,EAAQjB,MACnBkD,QAAQ,YACR7C,MAAM,WAEL8D,EACC,kBAACE,EAAA,EAAD,CAAkBC,KAAM,GAAIjE,MAAM,cAElC,YAGJ,kBAACmD,EAAA,EAAD,CACED,QAAShB,EAAK,UACdM,UAAW5B,EAAQjB,MACnBK,MAAM,WAHR,iB,kBC5IAf,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,MAAO,CACLC,OAAQ,EACRP,MAAO,OAETU,UAAW,CACTC,MAAO,OAEToD,YAAa,CACXpD,MAAO,iBAyEIkE,EArEwB,SAACvD,GACtC,IAAMC,EAAU3B,IADgC,EAEtB4B,mBAAS,IAFa,mBAEzCC,EAFyC,KAElCC,EAFkC,OAGdF,mBAAS,IAHK,mBAGzCd,EAHyC,KAG9BkB,EAH8B,OAIVJ,mBAAS,IAJC,mBAIzCuC,EAJyC,KAI5BM,EAJ4B,KAK1CvC,EAAUC,cAEV+C,EAAY3C,sBAAW,uCAC3B,WAAOC,GAAP,SAAAC,EAAA,6DACED,EAAEE,iBADJ,kBAGUyC,IAAMC,KAAN,UACDpI,oCADC,mBAGJ,CACE6E,UAPR,OAUI4C,EAAe,4BAVnB,gDAYIzC,EAAa,gBAZjB,yDAD2B,sDAgB3B,CAACH,IAGGoB,EAAOV,uBACX,SAACW,GACC,OAAO,kBAAMhB,EAAQc,KAAKE,MAE5B,CAAChB,IAGH,OACE,0BAAMoB,SAAU4B,EAAW3B,UAAW5B,EAAQxB,MAC5C,kBAACqD,EAAA,EAAD,CAAYD,UAAW5B,EAAQwC,aAAcA,GAC7C,kBAACX,EAAA,EAAD,CAAYD,UAAW5B,EAAQb,WAAYA,GAC3C,kBAAC2C,EAAA,EAAD,CACEF,UAAW5B,EAAQjB,MACnBgD,MAAM,QACNC,YAAY,oBACZC,QAAQ,WACRC,KAAK,QACLnE,MAAOmC,EACPiC,SAAU,SAACtB,GACTV,EAASU,EAAEuB,OAAOrE,OAClBsC,EAAa,IACbyC,EAAe,OAGnB,kBAACP,EAAA,EAAD,CACEL,KAAK,SACLN,UAAW5B,EAAQjB,MACnBkD,QAAQ,YACR7C,MAAM,WAJR,cAQA,kBAACmD,EAAA,EAAD,CACED,QAAShB,EAAK,UACdM,UAAW5B,EAAQjB,MACnBK,MAAM,WAHR,iB,kYCnFSpB,WAAf,MCQMK,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,MAAO,CACLC,OAAQ,EACRP,MAAO,OAET+D,YAAa,CACXpD,MAAO,aAETD,UAAW,CACTC,MAAO,OAETC,eAAgB,CACdC,eAAgB,OAChBC,OAAQ,UACRC,SAAU,GACVJ,MAAOb,EAAMkB,QAAQC,QAAQC,KAC7BX,OAAQ,QACRY,UAAW,QACXnB,MAAO,MACP,UAAW,CACTa,eAAgB,kBAsGPoE,GAjG0B,SAAC3D,GACxC,IAAMC,EAAU3B,KADkC,EAElB4B,mBAAS,IAFS,mBAE3ChB,EAF2C,KAEjCmB,EAFiC,OAGNH,mBAAS,IAHH,mBAG3C0D,EAH2C,KAG3BC,EAH2B,OAIhB3D,mBAAS,IAJO,mBAI3Cd,EAJ2C,KAIhCkB,EAJgC,OAKZJ,mBAAS,IALG,mBAK3CuC,EAL2C,KAK9BM,EAL8B,KAM5CvC,EAAUC,cACVE,EAAQzC,IAPoC,EAQvB8E,YAEzBc,IAFKC,EAR2C,oBAW1CnG,EAAY2C,qBAAW9C,GAAvBG,QAEFoG,EAAenD,sBAAW,uCAC9B,WAAOC,GAAP,iBAAAC,EAAA,yDACED,EAAEE,iBACE9B,IAAa0E,EAFnB,0CAI6BG,EAAiB,CACtC7C,UAAW,CACThC,WACA+E,MAAOtD,EAAMU,IAAI,YAP3B,iBAUM,QANQF,EAJd,EAIcA,YAMR,IAAIA,OAAJ,EAAIA,EAAM+C,gBACRtG,EAAQ,2BACHuD,EAAK+C,cAAcvI,MADjB,IAELK,YAAamF,EAAK+C,cAAclI,eAElCwE,EAAQc,KAAK,UAEbyB,EAAe,oBAjBvB,kDAoBMzC,EAAa,gBApBnB,gCAuBIA,EAAa,0BAvBjB,0DAD8B,sDA2B9B,CAACpB,EAAUyB,EAAO/C,EAAS4C,EAASuD,EAAkBH,IAGlDrC,EAAOV,uBACX,SAACW,GACC,OAAO,kBAAMhB,EAAQc,KAAKE,MAE5B,CAAChB,IAGH,OACE,0BAAMoB,SAAUoC,EAAcnC,UAAW5B,EAAQxB,MAC/C,kBAACqD,EAAA,EAAD,CAAYD,UAAW5B,EAAQwC,aAAcA,GAC7C,kBAACX,EAAA,EAAD,CAAYD,UAAW5B,EAAQb,WAAYA,GAC3C,kBAAC2C,EAAA,EAAD,CACEF,UAAW5B,EAAQjB,MACnBgD,MAAM,WACNC,YAAY,UACZC,QAAQ,WACRC,KAAK,WACLnE,MAAOkB,EACPkD,SAAU,SAACtB,GACTT,EAAYS,EAAEuB,OAAOrE,OACrBsC,EAAa,OAGjB,kBAACyB,EAAA,EAAD,CACEF,UAAW5B,EAAQjB,MACnBgD,MAAM,kBACNC,YAAY,UACZC,QAAQ,WACRC,KAAK,WACLnE,MAAO4F,EACPxB,SAAU,SAACtB,GACT+C,EAAkB/C,EAAEuB,OAAOrE,OAC3BsC,EAAa,OAGjB,kBAACkC,EAAA,EAAD,CACEL,KAAK,SACLN,UAAW5B,EAAQjB,MACnBkD,QAAQ,YACR7C,MAAM,WAJR,qBAQA,kBAACmD,EAAA,EAAD,CACED,QAAShB,EAAK,UACdM,UAAW5B,EAAQjB,MACnBK,MAAM,WAHR,iBCvHAf,GAAYC,YAAW,CAC3BE,KAAM,CACJC,MAAO,OACPC,OAAQ,QAEVwF,KAAM,CACJzF,MAAO,MACPC,OAAQ,OACRyF,MAAO,QAETC,MAAO,CACL3F,MAAO,MACPC,OAAQ,OACR2F,WAAY,8CACZF,MAAO,QACPxF,QAAS,OACTG,WAAY,SACZD,eAAgB,UAElByF,MAAO,CACLC,OAAQ,kBACR9F,MAAO,OAuBL+F,GAAe,WACnB,IAAMjE,EAAUC,cACVE,EAAQzC,IAQd,OAPAuD,qBAAU,WACHd,EAAMU,IAAI,eAGbb,EAAQkE,QAAR,UAFAlE,EAAQkE,QAAR,6BAAsC/H,OAAOC,SAAS+H,aAIvD,IACI,sCAGMC,GAhCoB,SAAC,GAAiB,EAAf9G,SAAgB,IAC9CmC,EAAU3B,KAChB,OACE,yBAAKuD,UAAW5B,EAAQxB,MACtB,yBAAKoD,UAAW5B,EAAQkE,MACtB,kBAAC,IAAD,CAAOU,OAAK,EAACpI,KAAK,IAAIqI,UAAW/E,IACjC,kBAAC,IAAD,CAAOtD,KAAK,SAASqI,UAAW/E,IAChC,kBAAC,IAAD,CAAOtD,KAAK,YAAYqI,UAAWpC,IACnC,kBAAC,IAAD,CAAOjG,KAAK,kBAAkBqI,UAAWvB,IACzC,kBAAC,IAAD,CAAO9G,KAAK,oBAAoBqI,UAAWnB,KAC3C,kBAAC,IAAD,CAAOmB,UAAWL,MAEpB,yBAAK5C,UAAW5B,EAAQoE,OACtB,yBAAKxC,UAAW5B,EAAQsE,MAAOQ,IAAI,wBAAwBC,IAAI,Q,+GC7BjE1G,GAAYC,aAAW,SAACC,GAAD,OAC3ByG,aAAa,CACXxG,KAAM,CACJyG,SAAU,GAEZC,WAAY,CACVC,YAAa5G,EAAM6G,QAAQ,IAE7BC,MAAO,CACL9F,OAAQ,WAEV+F,OAAQ,CACNC,KAAM,GAERnH,OAAO,cACLoH,SAAU,WACVC,aAAclH,EAAMmH,MAAMD,aAC1BE,gBAAiBC,aAAKrH,EAAMkB,QAAQoG,OAAOC,MAAO,KAClD,UAAW,CACTH,gBAAiBC,aAAKrH,EAAMkB,QAAQoG,OAAOC,MAAO,MAEpDX,YAAa5G,EAAM6G,QAAQ,GAC3BW,WAAY,EACZtH,MAAO,QACNF,EAAMyH,YAAYC,GAAG,MAAQ,CAC5BF,WAAYxH,EAAM6G,QAAQ,GAC1B3G,MAAO,SAGXyH,WAAY,CACVC,QAAS5H,EAAM6G,QAAQ,EAAG,GAC1B1G,OAAQ,OACR8G,SAAU,WACVY,cAAe,OACfzH,QAAS,OACTG,WAAY,SACZD,eAAgB,UAElBwH,UAAW,CACTjH,MAAO,WAETkH,WAAW,cACTH,QAAS5H,EAAM6G,QAAQ,EAAG,EAAG,EAAG,GAEhCmB,YAAY,cAAD,OAAgBhI,EAAM6G,QAAQ,GAA9B,OACXoB,WAAYjI,EAAMkI,YAAYC,OAAO,SACrCjI,MAAO,QACNF,EAAMyH,YAAYC,GAAG,MAAQ,CAC5BxH,MAAO,cAiEAkI,GApDoC,SAAC,GAG7C,IAFLC,EAEI,EAFJA,eAGM5G,GADF,EADJ5B,OAEgBC,MACVkC,EAAUC,cAEhB,OACE,yBAAKoB,UAAW5B,EAAQxB,MACtB,kBAACqI,GAAA,EAAD,CAAQrB,SAAS,UACf,kBAACsB,GAAA,EAAD,KACE,kBAACjF,EAAA,EAAD,CACES,QAAS,kBAAM/B,EAAQc,KAAK,MAC5BY,QAAQ,KACRL,UAAW5B,EAAQqF,OAHrB,iBAOA,yBAAKzD,UAAW5B,EAAQsF,SAEvBsB,EACC,yBAAKhF,UAAW5B,EAAQ5B,QACtB,yBAAKwD,UAAW5B,EAAQkG,YACtB,kBAAC,KAAD,OAEF,kBAACa,GAAA,EAAD,CACE5E,SAAUyE,EACV5E,YAAY,eACZhC,QAAS,CACPxB,KAAMwB,EAAQqG,UACdtH,MAAOiB,EAAQsG,YAEjBU,WAAY,CAAE,aAAc,aAG9B,KACJ,yBAAKpF,UAAW5B,EAAQsF,SACxB,kBAAC2B,GAAA,EAAD,CACEC,KAAK,QACLtF,UAAW5B,EAAQkF,WACnB9F,MAAM,UACN+H,aAAW,OACX7E,QAAS,kBAAM/B,EAAQc,KAAK,eAE5B,kBAAC,KAAD,W,2uBC1HL,IAAM+F,GAAgBpJ,IAAH,MAWbqJ,GAAwBrJ,IAAH,MCU5BsJ,GAAmBC,KAAW,CAClCC,IAAKD,OAAaE,IAAI,EAAG,gCAAgCC,SAAS,YAClEC,KAAMJ,OAEHE,IAAI,EAAG,gCACPC,SAAS,cAGRrJ,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,KAETM,MAAO,CACLG,aAAcX,EAAM6G,QAAQ,QAoIjBwC,GAhIU,WAAO,IAAD,EACL3H,oBAAS,GADJ,mBACtB4H,EADsB,KAChBC,EADgB,KAEvBvH,EAAUC,cAEJuH,EACRC,cADFC,OAAUF,GAEN/H,EAAU3B,KANa,EAQ8B0E,YAEzDsE,GAAuB,CAAEa,eAAgB,CAAC,uBAVf,mBAQtBC,EARsB,KAQIC,EARJ,KAQLjF,QAIlBkF,EAASC,aAAU,CACvBC,cAAe,CACbf,IAAK,GACLG,KAAM,GACNa,YAAa,IAEflB,oBACA3F,SAAS,WAAD,4BAAE,WAAO8G,GAAP,SAAA3H,EAAA,sEACFqH,EAAc,CAAElH,UAAU,2BAAMwH,GAAP,IAAeV,SADtC,OAERxH,EAAQc,KAAK,SAFL,2CAAF,mDAAC,KAMMqH,EAAmBC,YAClCvB,GACA,CACEnG,UAAW,CAAE8G,MACba,MAAOb,EACPc,YAAa,SAAC3H,GACRA,GACFmH,EAAOS,UAAU5H,EAAK6H,YAPtB5F,QAaR,OACE,kBAAC6F,GAAA,EAAD,CACEhJ,QAAS,CAAEiJ,MAAOjJ,EAAQxB,MAC1BqJ,KAAMA,EACNqB,QAAS,kBAAMpB,GAAQ,IACvBqB,SAAU,kBAAM5I,EAAQc,KAAK,UAC7B+H,qBAAsBhB,EACtBiB,qBAAsBjB,GAEtB,kBAACkB,GAAA,EAAD,gBACCZ,EACC,kBAACtF,EAAA,EAAD,MAEA,0BAAMzB,SAAU0G,EAAOtE,cACrB,oCACE,kBAACwF,GAAA,EAAD,KACE,kBAACzH,EAAA,EAAD,CACEiG,GAAG,MACHnG,UAAW5B,EAAQjB,MACnByK,WAAS,EACTzH,MAAM,MACNC,YAAY,iBACZC,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAOjB,IACrBmC,WAAYtB,EAAOuB,QAAQpC,IAAMa,EAAOwB,OAAOrC,IAAM,GACrDsC,MAAOzB,EAAOuB,QAAQpC,KAAOuC,QAAQ1B,EAAOwB,OAAOrC,OAErD,kBAAC1F,EAAA,EAAD,CACEiG,GAAG,OACHnG,UAAW5B,EAAQjB,MACnBgD,MAAM,OACNC,YAAY,sBACZC,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAOd,KACrBgC,WAAYtB,EAAOuB,QAAQjC,KAAOU,EAAOwB,OAAOlC,KAAO,GACvDmC,MAAOzB,EAAOuB,QAAQjC,MAAQoC,QAAQ1B,EAAOwB,OAAOlC,QAEtD,kBAAC7F,EAAA,EAAD,CACEiG,GAAG,cACHnG,UAAW5B,EAAQjB,MACnBiL,WAAS,EACTC,KAAM,EACNlI,MAAM,cACNC,YAAY,yBACZC,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAOD,YACrBmB,WACEtB,EAAOuB,QAAQpB,YAAcH,EAAOwB,OAAOrB,YAAc,GAE3DsB,MACEzB,EAAOuB,QAAQpB,aACfuB,QAAQ1B,EAAOwB,OAAOrB,gBAI5B,kBAAC0B,GAAA,EAAD,KACE,kBAAC3H,EAAA,EAAD,CACED,QAAS,kBAAMwF,GAAQ,IACvB1I,MAAM,UACN+K,SAAU/B,GAHZ,UAOA,kBAAC7F,EAAA,EAAD,CACEL,KAAK,SACL9C,MAAM,UACN+K,SAAU/B,GAETA,EACC,kBAAChF,EAAA,EAAD,CAAkBC,KAAM,KACtB0E,EACF,OAEA,Y,gMC3JH/J,WAAf,M,oBC0CeoM,GA9BqD,SAAC,GAE9D,IADLC,EACI,EADJA,MAEM9J,EAAUC,cACV8J,EAAc1J,uBAClB,SAACpE,GACC,OAAO,kBAAM+D,EAAQc,KAAK7E,MAE5B,CAAC+D,IAEH,OACE,kBAACgK,GAAA,EAAD,KACGF,EAAMG,OAAS,EACZH,EACG9F,QAAO,SAACkG,EAAGC,GAAJ,OAAYA,IAAQL,EAAMG,OAAS,KAC1CG,KAAI,SAACF,EAAGC,GAAJ,OACH,kBAACE,GAAA,EAAD,CAAMpD,IAAKkD,EAAKtL,MAAM,UAAUkD,QAASgI,EAAYG,EAAEjO,OACpDiO,EAAE9C,SAGT,KACH0C,EAAMG,OAAS,EACd,kBAAC3I,EAAA,EAAD,CAAYzC,MAAM,eACfiL,EAAMA,EAAMG,OAAS,GAAG7C,MAEzB,OCfJtJ,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJ2H,QAAS5H,EAAM6G,QAAQ,GACvBO,gBAAiBpH,EAAMkB,QAAQ4E,WAAWwG,QAC1CnM,OAAQ,sBAEVoM,QAAS,CACPrM,MAAO,IACPsM,SAAU,IACVpF,gBAAiBpH,EAAMkB,QAAQ4E,WAAWwG,QAC1CG,UAAW,OACXC,OAAQ,kBACRtM,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZS,OAAQ,UACRP,OAAQT,EAAM6G,QAAQ,GACtB8F,UAAW,KAEb7F,MAAO,CACLnG,aAAcX,EAAM6G,QAAQ,IAE9B+F,kBAAmB,CACjBxM,QAAS,OACTyM,SAAU,YAEZC,aAAc,CACZC,UAAW,IACX7M,MAAO,IACPsM,SAAU,IACV/L,OAAQT,EAAM6G,QAAQ,IAExBmG,qBAAsB,CACpBD,UAAW,IACX7M,MAAO,IACPsM,SAAU,IACV/L,OAAQT,EAAM6G,QAAQ,QA+CpBoG,GAAmC,SAAC,GAA2B,IAAzBlJ,EAAwB,EAAxBA,QACpCtC,GAD4D,EAAfnC,SACnCQ,MAEhB,OACE,kBAACoN,GAAA,EAAD,CAAM7J,UAAW5B,EAAQ8K,QAASxI,QAASA,GACzC,kBAAC,KAAD,QAcAoJ,GAA2C,SAAC,GAO3C,IANLC,EAMI,EANJA,EACAhE,EAKI,EALJA,KACAa,EAII,EAJJA,YACAoD,EAGI,EAHJA,YACAC,EAEI,EAFJA,iBACA1I,EACI,EADJA,QAEMnD,EAAU3B,KAChB,OACE,kBAACoN,GAAA,EAAD,CAAM7J,UAAW5B,EAAQqL,cACvB,kBAACS,GAAA,EAAD,CACEzG,MACElC,EACE,kBAAC4I,GAAA,EAAD,CAAUC,UAAU,OAAO/J,QAAQ,OAAOxD,MAAO,IAAKC,OAAQ,KADzD,UAGFiN,EAHE,cAGKhE,GAGdsE,OACE9I,EACE,kBAAC4I,GAAA,EAAD,CACEC,UAAU,OACV/J,QAAQ,SACRxD,MAAO,GACPC,OAAQ,KAGV,kBAACuI,GAAA,EAAD,CAAY3E,QAASsJ,GACnB,kBAAC,KAAD,SAKR,kBAACM,GAAA,EAAD,KACG/I,EACC,kBAAC4I,GAAA,EAAD,CAAUC,UAAU,OAAO/J,QAAQ,OAAOxD,MAAO,IAAKC,OAAQ,KAE9D,kBAACmD,EAAA,EAAD,CAAYsK,QAAM,GAAE3D,IAGxB,kBAAC4D,GAAA,EAAD,KACGjJ,EACC,kBAAC4I,GAAA,EAAD,CAAUC,UAAU,OAAO/J,QAAQ,OAAOxD,MAAO,GAAIC,OAAQ,KAE7D,kBAAC6D,EAAA,EAAD,CACEc,KAAK,QACLnB,KAAK,SACL9C,MAAM,UACNkD,QAASuJ,GAJX,gBAcKQ,GAzHE,WAAO,IAAD,EACfrM,EAAU3B,KACVkC,EAAUC,cAFK,EAIgCmI,YAEnDvB,IAFYkF,EAJO,EAIbpL,KAAyBqL,EAJZ,EAIGpJ,QAGxB,OACE,oCACE,kBAAC,GAAD,MACA,yBAAKvB,UAAW5B,EAAQxB,MACtB,kBAAC,GAAD,CAAmB6L,MAAO,CAAC,CAAE1C,KAAM,eACnC,yBAAK/F,UAAW5B,EAAQmL,mBACrBoB,EACC,kBAAC,GAAD,CAAapJ,SAAO,IADN,OAGdmJ,QAHc,IAGdA,GAHc,UAGdA,EAAUA,gBAHI,aAGd,EAAoB3B,KAAI,SAACF,GAAD,mBACtB,kBAAC,GAAD,CACEjD,IAAG,iBAAEiD,QAAF,IAAEA,OAAF,EAAEA,EAAG1C,UAAL,QAAW,GACd4D,EAAC,iBAAElB,QAAF,IAAEA,OAAF,EAAEA,EAAGjD,WAAL,QAAY,GACbG,KAAI,iBAAE8C,QAAF,IAAEA,OAAF,EAAEA,EAAG9C,YAAL,QAAa,GACjBa,YAAW,iBAAEiC,QAAF,IAAEA,OAAF,EAAEA,EAAGjC,mBAAL,QAAoB,GAC/BoD,YAAa,kBAAMrL,EAAQc,KAAR,+BAA8BoJ,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAG1C,MACpD8D,iBAAkB,kBAChBtL,EAAQc,KAAR,0BAAyBoJ,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAG1C,GAA5B,mBAMR,kBAAC,GAAD,CAASzF,QAAS,kBAAM/B,EAAQc,KAAK,qBAEvC,kBAAC,IAAD,CAAOuD,OAAK,EAACpI,KAAK,gBAAgBqI,UAAW+C,KAC7C,kBAAC,IAAD,CAAOhD,OAAK,EAACpI,KAAK,oBAAoBqI,UAAW+C,QC3FnDvJ,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJ2H,QAAS5H,EAAM6G,QAAQ,GACvBO,gBAAiBpH,EAAMkB,QAAQ4E,WAAWwG,QAC1CnM,OAAQ,0BAyBG8N,GArBM,WACnB,IAAMxM,EAAU3B,KACRV,EAAY2C,qBAAW9C,GAAvBG,QAER,OACE,oCACE,kBAAC,GAAD,MACA,yBAAKiE,UAAW5B,EAAQxB,MACtB,kBAAC+D,EAAA,EAAD,CACED,QAAS,WACP3E,EAAQ,IACRjB,OAAOC,SAASC,KAAO,WAH3B,a,kUCpBD,IAAMwK,GAAgBpJ,IAAH,M,6qBCAnB,IAAMyO,GAAezO,IAAH,MAWZ0O,GAAuB1O,IAAH,MCU3BsJ,GAAmBC,KAAW,CAClCC,IAAKD,OAAaE,IAAI,EAAG,gCAAgCC,SAAS,YAClEC,KAAMJ,OAEHE,IAAI,EAAG,gCACPC,SAAS,cAGRrJ,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,KAETM,MAAO,CACLG,aAAcX,EAAM6G,QAAQ,QAoIjBuH,GAhIS,WAAO,IAAD,EACJ1M,oBAAS,GADL,mBACrB4H,EADqB,KACfC,EADe,KAEtBvH,EAAUC,cAFY,EAKxBwH,cADFC,OAAU2E,EAJgB,EAIhBA,SAAUC,EAJM,EAINA,UAEhB7M,EAAU3B,KANY,EAQ6B0E,YAEvD2J,GAAsB,CAAExE,eAAgB,CAAC,oBAVf,mBAQrB4E,EARqB,KAQIC,EARJ,KAQL5J,QAIjBkF,EAASC,aAAU,CACvBC,cAAe,CACbf,IAAK,GACLG,KAAM,GACNa,YAAa,IAEflB,oBACA3F,SAAS,WAAD,4BAAE,WAAO8G,GAAP,SAAA3H,EAAA,sEACFgM,EAAa,CAAE7L,UAAU,2BAAMwH,GAAP,IAAeV,GAAI6E,EAAUC,gBADnD,OAERtM,EAAQc,KAAR,mBAAyBwL,EAAzB,aAFQ,2CAAF,mDAAC,KAMMG,EAAkBrE,YACjC8D,GACA,CACExL,UAAW,CAAE8G,GAAI6E,GACjBhE,MAAOgE,EACP/D,YAAa,SAAC3H,GACRA,GACFmH,EAAOS,UAAU5H,EAAK+L,WAPtB9J,QAaR,OACE,kBAAC6F,GAAA,EAAD,CACEhJ,QAAS,CAAEiJ,MAAOjJ,EAAQxB,MAC1BqJ,KAAMA,EACNqB,QAAS,kBAAMpB,GAAQ,IACvBqB,SAAU,kBAAM5I,EAAQc,KAAR,mBAAyBwL,EAAzB,cAChBzD,qBAAsB2D,EACtB1D,qBAAsB0D,GAEtB,kBAACzD,GAAA,EAAD,eACC0D,EACC,kBAAC5J,EAAA,EAAD,MAEA,0BAAMzB,SAAU0G,EAAOtE,cACrB,oCACE,kBAACwF,GAAA,EAAD,KACE,kBAACzH,EAAA,EAAD,CACEiG,GAAG,MACHnG,UAAW5B,EAAQjB,MACnByK,WAAS,EACTzH,MAAM,MACNC,YAAY,iBACZC,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAOjB,IACrBmC,WAAYtB,EAAOuB,QAAQpC,IAAMa,EAAOwB,OAAOrC,IAAM,GACrDsC,MAAOzB,EAAOuB,QAAQpC,KAAOuC,QAAQ1B,EAAOwB,OAAOrC,OAErD,kBAAC1F,EAAA,EAAD,CACEiG,GAAG,OACHnG,UAAW5B,EAAQjB,MACnBgD,MAAM,OACNC,YAAY,sBACZC,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAOd,KACrBgC,WAAYtB,EAAOuB,QAAQjC,KAAOU,EAAOwB,OAAOlC,KAAO,GACvDmC,MAAOzB,EAAOuB,QAAQjC,MAAQoC,QAAQ1B,EAAOwB,OAAOlC,QAEtD,kBAAC7F,EAAA,EAAD,CACEiG,GAAG,cACHnG,UAAW5B,EAAQjB,MACnBiL,WAAS,EACTC,KAAM,EACNlI,MAAM,cACNC,YAAY,yBACZC,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAOD,YACrBmB,WACEtB,EAAOuB,QAAQpB,YAAcH,EAAOwB,OAAOrB,YAAc,GAE3DsB,MACEzB,EAAOuB,QAAQpB,aACfuB,QAAQ1B,EAAOwB,OAAOrB,gBAI5B,kBAAC0B,GAAA,EAAD,KACE,kBAAC3H,EAAA,EAAD,CACED,QAAS,kBAAMwF,GAAQ,IACvB1I,MAAM,UACN+K,SAAU4C,GAHZ,UAOA,kBAACxK,EAAA,EAAD,CACEL,KAAK,SACL9C,MAAM,UACN+K,SAAU4C,GAETA,EACC,kBAAC3J,EAAA,EAAD,CAAkBC,KAAM,KACtBuJ,EACF,OAEA,Y,urBC3JX,IAAMM,GAAelP,IAAH,MAWZmP,GAAuBnP,IAAH,M,oBCY3BoP,GAAYC,KAAIC,cAAc3C,KAAI,SAACF,GAAD,MAAQ,CAC9C8C,KAAMF,KAAIG,QAAQ/C,GAClB9C,KAAM8C,EACNgD,WAAYJ,KAAIK,cAAcL,KAAIG,QAAQ/C,QAGtCnD,GAAmBC,KAAW,CAClCgG,KAAMhG,OAAaE,IAAI,EAAG,YAAYC,SAAS,cAG3CrJ,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,KAETM,MAAO,CACLG,aAAcX,EAAM6G,QAAQ,QA+GjBuI,GA3GS,WAAO,IAAD,EACJ1N,oBAAS,GADL,mBACrB4H,EADqB,KACfC,EADe,KAEtBvH,EAAUC,cAFY,EAKxBwH,cADFC,OAAU2F,EAJgB,EAIhBA,SAAUf,EAJM,EAINA,UAEhB7M,EAAU3B,KANY,EAQ6B0E,YAEvDoK,GAAsB,CAAEjF,eAAgB,CAAC,oBAVf,mBAQrB2F,EARqB,KAQIC,EARJ,KAQL3K,QAIjBkF,EAASC,aAAU,CACvBC,cAAe,CACbZ,KAAM,GACN8F,WAAY,GACZF,KAAM,IAERjG,oBACA3F,SAAS,WAAD,4BAAE,WAAO8G,GAAP,SAAA3H,EAAA,6DACRjE,QAAQC,IAAR,2BAAiB2L,GAAjB,IAAyBV,GAAI6F,EAAUf,eAD/B,SAEFgB,EAAa,CAAE5M,UAAU,2BAAMwH,GAAP,IAAeV,GAAI6F,EAAUf,gBAFnD,OAGRtM,EAAQc,KAAR,mBAAyBwL,EAAzB,aAHQ,2CAAF,mDAAC,KAOMG,EAAkBrE,YACjCuE,GACA,CACEjM,UAAW,CAAE8G,GAAI6F,GACjBhF,MAAOgF,EACP/E,YAAa,SAAC3H,GACRA,GACFmH,EAAOS,UAAU5H,EAAK6M,WAPtB5K,QAaR,OADAtG,QAAQC,IAAIuL,EAAOI,QAEjB,kBAACO,GAAA,EAAD,CACEhJ,QAAS,CAAEiJ,MAAOjJ,EAAQxB,MAC1BqJ,KAAMA,EACNqB,QAAS,kBAAMpB,GAAQ,IACvBqB,SAAU,kBAAM5I,EAAQc,KAAR,mBAAyBwL,EAAzB,cAChBzD,qBAAsB0E,EACtBzE,qBAAsByE,GAEtB,kBAACxE,GAAA,EAAD,eACC0D,EACC,kBAAC5J,EAAA,EAAD,MAEA,0BAAMzB,SAAU0G,EAAOtE,cACrB,oCACE,kBAACwF,GAAA,EAAD,KACE,kBAACyE,GAAA,EAAD,CACEC,QAAO,CAAG5F,EAAOE,eAAV,oBAA4B6E,KACnCc,eAAgB,SAACC,GAAD,OAAYA,EAAOxG,MACnCyG,kBAAmB,SAACD,GAAD,OACjBA,EAAOZ,OAASlF,EAAOI,OAAO8E,MAEhCpL,SAAU,SAACtB,EAAG9C,GAAJ,OACRsK,EAAOS,UAAU/K,GAAgBsK,EAAOE,gBAE1CxK,MAAOsK,EAAOI,OACd4F,YAAU,EACVC,YAAa,SAACrG,GAAD,OACX,kBAACnG,EAAA,EAAD,iBACMmG,EADN,CAEEuB,WAAS,EACTxH,YAAY,cACZC,QAAQ,WACR0H,WAAYtB,EAAOuB,QAAQ2D,KAAOlF,EAAOwB,OAAO0D,KAAO,GACvDzD,MAAOzB,EAAOuB,QAAQ2D,MAAQxD,QAAQ1B,EAAOwB,OAAO0D,aAK5D,kBAACrD,GAAA,EAAD,KACE,kBAAC3H,EAAA,EAAD,CACED,QAAS,kBAAMwF,GAAQ,IACvB1I,MAAM,UACN+K,SAAU2D,GAHZ,UAOA,kBAACvL,EAAA,EAAD,CACEL,KAAK,SACL9C,MAAM,UACN+K,SAAU2D,GAETA,EACC,kBAAC1K,EAAA,EAAD,CAAkBC,KAAM,KACtBuK,EACF,OAEA,Y,oBCvIZvP,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,KAET8P,KAAM,CACJhP,OAAQ,eAyCGiP,GArCY,WAAO,IAAD,EACPvO,oBAAS,GADF,mBACxB4H,EADwB,KAClBC,EADkB,KAEzBvH,EAAUC,cAFe,EAK3BwH,cADFC,OAAU2E,EAJmB,EAInBA,SAAUC,EAJS,EAITA,UAEhB7M,EAAU3B,KAEhB,OACE,kBAAC2K,GAAA,EAAD,CACEhJ,QAAS,CAAEiJ,MAAOjJ,EAAQxB,MAC1BqJ,KAAMA,EACNqB,QAAS,kBAAMpB,GAAQ,IACvBqB,SAAU,kBAAM5I,EAAQc,KAAR,mBAAyBwL,EAAzB,eAEhB,kBAAC4B,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACE9M,UAAW5B,EAAQuO,KACnBjM,QAAS,kBACP/B,EAAQc,KAAR,mBAAyBwL,EAAzB,mBAA6CD,EAA7C,iBAHJ,aAQA,kBAAC8B,GAAA,EAAD,CACE9M,UAAW5B,EAAQuO,KACnBjM,QAAS,kBACP/B,EAAQc,KAAR,mBAAyBwL,EAAzB,2BAAqDD,MAHzD,WCvBFvO,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJ2H,QAAS5H,EAAM6G,QAAQ,GACvBO,gBAAiBpH,EAAMkB,QAAQ4E,WAAWwG,QAC1CnM,OAAQ,sBAEV2G,MAAO,CACLnG,aAAcX,EAAM6G,QAAQ,IAE9BuJ,qBAAsB,CACpBzP,aAAcX,EAAM6G,QAAQ,GAC5B3G,MAAO,OACPE,QAAS,OACTC,cAAe,MACfC,eAAgB,UAGlB+P,iBAAkB,CAChBjQ,QAAS,OACTyM,SAAU,WACVlM,aAAcX,EAAM6G,QAAQ,IAE9ByJ,WAAY,CACV9D,SAAU,IACV+D,SAAU,IACVrQ,MAAO,IACPO,OAAQT,EAAM6G,QAAQ,GACtB7F,OAAQ,WAEVwP,QAAS,CACPxP,OAAQ,UACRyP,YAAa,SACb5P,MAAO,qBACPJ,OAAQT,EAAM6G,QAAQ,IAExB4H,cAAe,CACbvH,aAAc,GACdsF,SAAU,IACV+D,SAAU,IACVrQ,MAAO,IACP0G,YAAa5G,EAAM6G,QAAQ,QAsHzB6J,GAAmC,SAAC,GAAiB,IAAf3M,EAAc,EAAdA,QACpCtC,EAAU3B,KAEhB,OACE,kBAAC6Q,GAAA,EAAD,CACEtN,UAAW5B,EAAQ+O,QACnBzM,QAASA,EACTL,QAAQ,WACRkN,OAAQ,kBAAC,KAAD,CAASC,MAAO,CAAEhQ,MAAO,yBACjC2C,MAAM,SAWNsN,GAAyC,SAAC,GAAgC,IAA9B1H,EAA6B,EAA7BA,KAAMxE,EAAuB,EAAvBA,QAASb,EAAc,EAAdA,QACzDtC,EAAU3B,KAChB,OAAO8E,EACL,kBAAC4I,GAAA,EAAD,CACEnK,UAAW5B,EAAQgN,cACnB/K,QAAQ,OACRxD,MAAO,IACPC,OAAQ,KAGV,kBAACwQ,GAAA,EAAD,CAAM5M,QAASA,EAASV,UAAW5B,EAAQ6O,WAAY9M,MAAO4F,KAInD2H,GApJI,WAAO,IAAD,QACjBtP,EAAU3B,KADO,EAEK4B,mBAAS,IAFd,mBAEhB7B,EAFgB,KAERmR,EAFQ,KAIXxH,EACRC,cADFC,OAAUF,GAENxH,EAAUC,cANO,EAQ4BmI,YAEjDvB,GAAe,CACfnG,UAAW,CAAE8G,QAHDgB,EARS,EAQf7H,KAAwBwH,EART,EAQAvF,QAMvB,OACE,oCACE,kBAAC,GAAD,CACE/E,OAAQA,EACRwI,eAAgB,SAAC/F,GAAD,OAAO0O,EAAU1O,EAAEuB,OAAOrE,UAE5C,yBAAK6D,UAAW5B,EAAQxB,MACtB,kBAAC,GAAD,CACE6L,MAAO,CAAC,CAAE1C,KAAM,WAAYnL,KAAM,SAAW,CAAEmL,KAAM,cAEvD,yBAAK/F,UAAW5B,EAAQ2O,sBACrBjG,EACC,kBAACqD,GAAA,EAAD,CAAUC,UAAU,OAAO/J,QAAQ,OAAOxD,MAAO,IAAKC,OAAQ,KAE9D,kBAACmD,EAAA,EAAD,CAAYI,QAAQ,MAApB,OAA0B8G,QAA1B,IAA0BA,OAA1B,EAA0BA,EAASA,QAAQpB,OAG/C,yBAAK/F,UAAW5B,EAAQ4O,kBACrBlG,EACC,kBAAC,GAAD,CAAYvF,SAAO,IADN,OAGb4F,QAHa,IAGbA,GAHa,UAGbA,EAASA,eAHI,iBAGb,EAAkByG,eAHL,aAGb,EACIjL,QAAO,SAACkG,GAAD,OACPA,EAAE9C,KAAK8H,cAAcC,SAAStR,EAAOqR,kBAEtC9E,KAAI,SAACF,GAAD,OACH,kBAAC,GAAD,CACEjD,IAAG,OAAEiD,QAAF,IAAEA,OAAF,EAAEA,EAAG1C,GACRJ,KAAI,OAAE8C,QAAF,IAAEA,OAAF,EAAEA,EAAG9C,KACTrF,QAAS,kBACP/B,EAAQc,KAAR,mBACc0G,EADd,2BACmC0C,EAAE1C,GADrC,mBAOV,kBAAC,GAAD,CACEzF,QAAS,kBAAM/B,EAAQc,KAAR,mBAAyB0G,EAAzB,wBAGnB,kBAAClG,EAAA,EAAD,CAAYI,QAAQ,KAAKL,UAAW5B,EAAQqF,OAA5C,qBAGA,yBAAKzD,UAAW5B,EAAQ4O,kBACrBlG,EACC,kBAAC,GAAD,CAAYvF,SAAO,IADN,OAGb4F,QAHa,IAGbA,GAHa,UAGbA,EAASA,eAHI,iBAGb,EAAkB4G,eAHL,aAGb,EACIpL,QAAO,SAACkG,GAAD,OACPA,EAAE9C,KAAK8H,cAAcC,SAAStR,EAAOqR,kBAEtC9E,KAAI,SAACF,GAAD,OACH,kBAAC,GAAD,CACEjD,IAAG,OAAEiD,QAAF,IAAEA,OAAF,EAAEA,EAAG1C,GACRJ,KAAI,OAAE8C,QAAF,IAAEA,OAAF,EAAEA,EAAG9C,KACTrF,QAAS,kBACP/B,EAAQc,KAAR,mBAAyB0G,EAAzB,2BAA8C0C,EAAE1C,WAK1D,kBAAC,GAAD,CACEzF,QAAS,kBAAM/B,EAAQc,KAAR,mBAAyB0G,EAAzB,yBAIrB,kBAAC,IAAD,CACEnD,OAAK,EACLpI,KAAK,qCACLqI,UAAW8H,KAEb,kBAAC,IAAD,CACE/H,OAAK,EACLpI,KAAK,+CACLqI,UAAW8H,KAEb,kBAAC,IAAD,CACE/H,OAAK,EACLpI,KAAK,uDACLqI,UAAW2J,KAEb,kBAAC,IAAD,CACE5J,OAAK,EACLpI,KAAK,qCACLqI,UAAW8I,KAEb,kBAAC,IAAD,CACE/I,OAAK,EACLpI,KAAK,+CACLqI,UAAW8I,O,wxBCjKZ,IAAMiC,GAAe5R,IAAH,MAaZ6R,GAAc7R,IAAH,MAsBX8R,GAAoB9R,IAAH,M,unBCnCvB,IAAM+R,GAAW/R,IAAH,MAURgS,GAAoBhS,IAAH,MCaxBsJ,GAAmBC,KAAW,CAClCI,KAAMJ,OAEHE,IAAI,EAAG,gCACPC,SAAS,cAGRrJ,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,KAETM,MAAO,CACLG,aAAcX,EAAM6G,QAAQ,QAI1B6K,GAAsB,CAC1BtI,KAAM,GACNuI,QAAQ,GA+HKC,GA5HM,WAAO,IAAD,EACDlQ,oBAAS,GADR,mBAClB4H,EADkB,KACZC,EADY,OAEiB7H,oBAAS,GAF1B,mBAElBmQ,EAFkB,KAEHC,EAFG,KAGnB9P,EAAUC,cAHS,EAMrBwH,cADFC,OAAU2E,EALa,EAKbA,SAAUC,EALG,EAKHA,UAAWyD,EALR,EAKQA,MAE3BtQ,EAAU3B,KAPS,EAS0B0E,YAEjDiN,GAAmB,CAAE9H,eAAgB,CAAC,0BAXf,mBASlBqI,EATkB,KASIC,EATJ,KASLrN,QAIdkF,EAASC,aAAU,CACvBC,cAAe0H,GACf3I,oBACA3F,SAAS,WAAD,4BAAE,WAAO8G,GAAP,SAAA3H,EAAA,yDACHsP,EADG,gCAEAG,EAAU,CAAEtP,UAAU,2BAAMwH,GAAP,IAAeV,GAAIuI,EAAO1D,eAF/C,OAGNrM,EAAQc,KAAR,mBAAyBwL,EAAzB,mBAA6CD,EAA7C,eAHM,sCAKA2D,EAAU,CAAEtP,UAAU,2BAAMwH,GAAP,IAAeV,GAAIuI,EAAO1D,eAL/C,OAMNvE,EAAOoI,YAND,2CAAF,mDAAC,KAWMC,EAAe/H,YAAgCoH,GAAU,CACxE9O,UAAW,CAAE8G,GAAIuI,GACjB1H,MAAO0H,EACPzH,YAAa,SAAC3H,GACRA,GACFmH,EAAOS,UAAU5H,EAAKsG,QALpBrE,QASR,OACE,kBAAC6F,GAAA,EAAD,CACEhJ,QAAS,CAAEiJ,MAAOjJ,EAAQxB,MAC1BqJ,KAAMA,EACNqB,QAAS,kBAAMpB,GAAQ,IACvBqB,SAAU,kBACR5I,EAAQc,KAAR,mBAAyBwL,EAAzB,mBAA6CD,EAA7C,gBAEFxD,qBAAsBoH,EACtBnH,qBAAsBmH,GAEtB,kBAAClH,GAAA,EAAD,YACCoH,EACC,kBAACtN,EAAA,EAAD,MAEA,0BAAMzB,SAAU0G,EAAOtE,cACrB,oCACE,kBAACwF,GAAA,EAAD,KACE,kBAACzH,EAAA,EAAD,CACEiG,GAAG,OACHnG,UAAW5B,EAAQjB,MACnBgD,MAAM,OACNC,YAAY,OACZC,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAOd,KACrBgC,WACEtB,EAAOuB,QAAQjC,KACXU,EAAOwB,OAAOlC,KACd,mCAENmC,MAAOzB,EAAOuB,QAAQjC,MAAQoC,QAAQ1B,EAAOwB,OAAOlC,QAEtD,kBAACgJ,GAAA,EAAD,CACEC,QACE,kBAACC,GAAA,EAAD,CACE9I,GAAG,SACHhK,MAAOsK,EAAOI,OAAOyH,OACrB/N,SAAUkG,EAAOqB,aACjBoH,QAASzI,EAAOI,OAAOyH,SAG3BnO,MAAM,YAGV,kBAACmI,GAAA,EAAD,KACIoG,EAWE,KAVF,kBAACK,GAAA,EAAD,CACEC,QACE,kBAACC,GAAA,EAAD,CACE9S,MAAOqS,EACPjO,SAAU,kBAAMkO,GAAkBD,IAClCU,QAASV,IAGbrO,MAAM,mBAGV,kBAACQ,EAAA,EAAD,CACEN,QAAQ,YACRC,KAAK,SACL9C,MAAM,UACN+K,SAAUqG,GAETA,EACC,kBAACpN,EAAA,EAAD,CAAkBC,KAAM,KACtBiN,EACF,OAEA,OAGJ,kBAAC/N,EAAA,EAAD,CACED,QAAS,kBAAMwF,GAAQ,IACvB1I,MAAM,UACN+K,SAAUqG,GAHZ,e,qjBCzJP,IAAMO,GAAmB/S,IAAH,MAShBgT,GAA4BhT,IAAH,MCYhCsJ,GAAmBC,KAAW,CAClCxJ,MAAOwJ,OAEJE,IAAI,EAAG,gCACPC,SAAS,cAGRrJ,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,MAAO,KAETM,MAAO,CACLG,aAAcX,EAAM6G,QAAQ,QAyGjB6L,GArGc,WAAO,IAAD,EACThR,oBAAS,GADA,mBAC1B4H,EAD0B,KACpBC,EADoB,KAE3BvH,EAAUC,cAFiB,EAK7BwH,cADFC,OAAU2E,EAJqB,EAIrBA,SAAUC,EAJW,EAIXA,UAAWyD,EAJA,EAIAA,MAAOY,EAJP,EAIOA,cAAetD,EAJtB,EAIsBA,SAEjD5N,EAAU3B,KANiB,EAW7B0E,YACFiO,GACA,CAAE9I,eAAgB,CAAC,0BAbY,mBAS/BiJ,EAT+B,KAUpBC,EAVoB,KAU7BjO,QAKEkF,EAASC,aAAU,CACvBC,cAAe,CACbxK,MAAO,IAETuJ,oBACA3F,SAAS,WAAD,4BAAE,WAAO8G,GAAP,SAAA3H,EAAA,sEACFqQ,EAAkB,CACtBlQ,UAAU,2BAAMwH,GAAP,IAAeV,GAAImJ,EAAeZ,QAAO1C,eAF5C,OAIRrN,EAAQc,KAAR,mBAAyBwL,EAAzB,mBAA6CD,EAA7C,eAJQ,2CAAF,mDAAC,KAQMyE,EAAuB1I,YAEtCoI,GAAkB,CAClB9P,UAAW,CAAE8G,GAAImJ,GACjBtI,MAAOsI,EACPrI,YAAa,SAAC3H,GACRA,GACFmH,EAAOS,UAAU5H,EAAKoQ,gBAPpBnO,QAWR,OACE,kBAAC6F,GAAA,EAAD,CACEhJ,QAAS,CAAEiJ,MAAOjJ,EAAQxB,MAC1BqJ,KAAMA,EACNqB,QAAS,kBAAMpB,GAAQ,IACvBqB,SAAU,kBACR5I,EAAQc,KAAR,mBAAyBwL,EAAzB,mBAA6CD,EAA7C,gBAEFxD,qBAAsBgI,EACtB/H,qBAAsB+H,GAEtB,kBAAC9H,GAAA,EAAD,oBACC+H,EACC,kBAACjO,EAAA,EAAD,MAEA,0BAAMzB,SAAU0G,EAAOtE,cACrB,oCACE,kBAACwF,GAAA,EAAD,KACE,kBAACzH,EAAA,EAAD,CACEiG,GAAG,QACHnG,UAAW5B,EAAQjB,MACnByK,WAAS,EACTS,KAAM,EACND,WAAS,EACTjI,MAAM,QACNE,QAAQ,WACRwH,WAAS,EACTtH,SAAUkG,EAAOqB,aACjB3L,MAAOsK,EAAOI,OAAO1K,MACrB4L,WAAYtB,EAAOuB,QAAQ7L,MAAQsK,EAAOwB,OAAO9L,MAAQ,GACzD+L,MAAOzB,EAAOuB,QAAQ7L,OAASgM,QAAQ1B,EAAOwB,OAAO9L,UAGzD,kBAACmM,GAAA,EAAD,KACE,kBAAC3H,EAAA,EAAD,CACED,QAAS,kBAAMwF,GAAQ,IACvB1I,MAAM,UACN+K,SAAUiH,GAHZ,UAOA,kBAAC7O,EAAA,EAAD,CACEL,KAAK,SACL9C,MAAM,UACN+K,SAAUiH,GAETA,EACC,kBAAChO,EAAA,EAAD,CAAkBC,KAAM,KACtB6N,EACF,OAEA,YClGZ7S,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJ2H,QAAS5H,EAAM6G,QAAQ,GACvBO,gBAAiBpH,EAAMkB,QAAQ4E,WAAWwG,QAC1CnM,OAAQ,sBAEV0O,UAAW,CACTzO,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,UAEdyS,cAAe,CACb9S,MAAO,KAET+S,aAAc,CACZxS,OAAQT,EAAM6G,QAAQ,IAExBqM,iBAAkB,CAChB9S,QAAS,OACTC,cAAe,MACfC,eAAgB,WAChBK,aAAcX,EAAM6G,QAAQ,IAE9BsM,YAAa,CACXjT,MAAO,OACPmB,UAAW,UAEb+R,kBAAmB,CACjB3S,OAAQT,EAAM6G,QAAQ,IAExBwM,QAAS,CACPjT,QAAS,OACTC,cAAe,SACfqM,OAAQ,kBAEV4G,kBAAmB,CACjBlT,QAAS,OACTC,cAAe,MACfE,WAAY,SACZ6G,gBAAiB,OACjBQ,QAAS,IAEX2L,SAAU,CACR1S,MAAO,iBACPG,OAAQ,UACR,UAAW,CACTD,eAAgB,cAGpByS,sBAAuB,CACrBpT,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,SACZJ,OAAQ,KAEVsT,qBAAsB,CACpBvT,MAAO,MACPC,OAAQ,OACRa,OAAQ,WAEV+R,YAAa,CACXnL,QAAS5H,EAAM6G,QAAQ,GACvB7F,OAAQ,WAEV0S,cAAe,CAAEvT,OAAQ,QACzBwT,eAAgB,CACdvM,gBAAiB,QACjBjH,OAAQ,QAEV4G,OAAQ,CAAEC,KAAM,GAChB4M,cAAe,CACb/S,MAAO,kBACP+G,QAAS5H,EAAM6G,QAAQ,QAIrBgN,GAAmB,CACvBrK,GAAI,GACJwF,KAAM,GACNE,WAAY,GACZ9F,KAAM,IA4MF0K,GAAU,SAAC,GAWL,IAVV1G,EAUS,EAVTA,EACA2G,EASS,EATTA,gBACAC,EAQS,EARTA,iBACAC,EAOS,EAPTA,cACAC,EAMS,EANTA,aACAvC,EAKS,EALTA,OACAwC,EAIS,EAJTA,WACAC,EAGS,EAHTA,oBACAC,EAES,EAFTA,qBACAC,EACS,EADTA,YAEM7S,EAAU3B,KAChB,OACE,yBAAKuD,UAAW5B,EAAQ4R,SACtB,yBAAKhQ,UAAW5B,EAAQ6R,mBACtB,kBAAChQ,EAAA,EAAD,CAAYS,QAASoQ,EAAY9Q,UAAW5B,EAAQ8R,UACjDnG,GAEH,yBAAK/J,UAAW5B,EAAQsF,SACvB4K,EAAS,kBAAChB,GAAA,EAAD,CAAMnN,MAAM,SAAS3C,MAAM,cAAiB,KACtD,kBAAC6H,GAAA,EAAD,CAAY3E,QAASuQ,GACnB,kBAAC,KAAD,QAGJ,yBAAKjR,UAAW5B,EAAQ+R,uBACtB,yBACEnQ,UAAWS,YAAKrC,EAAQgS,qBAAsBhS,EAAQiS,eACtD3P,QAASqQ,GAERL,EACC,kBAACzQ,EAAA,EAAD,CAAYD,UAAW5B,EAAQsR,aAC5BgB,EAAgBvU,OAGnB,kBAAC8D,EAAA,EAAD,CAAYD,UAAW5B,EAAQmS,eAA/B,yBACyBM,EAAa9K,OAI1C,yBACE/F,UAAWS,YAAKrC,EAAQgS,qBAAsBhS,EAAQkS,gBACtD5P,QAASsQ,GAERL,EACC,kBAAC1Q,EAAA,EAAD,CAAYD,UAAW5B,EAAQsR,aAC5BiB,EAAiBxU,OAGpB,kBAAC8D,EAAA,EAAD,CAAYD,UAAW5B,EAAQmS,eAA/B,yBACyBK,EAAc7K,UASpC2H,GApQI,WAAO,IAAD,QACjBtP,EAAU3B,KADO,EAEK4B,mBAAS,IAFd,mBAEhB7B,EAFgB,KAERmR,EAFQ,OAGiBtP,mBAASmS,IAH1B,mBAGhBK,EAHgB,KAGFK,EAHE,OAImB7S,mBAASmS,IAJ5B,mBAIhBI,EAJgB,KAIDO,EAJC,OAOnB/K,cADFC,OAAU4E,EANW,EAMXA,UAAWD,EANA,EAMAA,SAEjBrM,EAAUC,cARO,EAS4BmI,YAEjDiH,GAAc,CACd3O,UAAW,CAAE8G,GAAI8E,KAHL9D,EATS,EASf7H,KAAwBwH,EATT,EASAvF,QAMT8J,EAAWtE,YAAoCkH,GAAa,CACxE5O,UAAW,CAAE8G,GAAI6E,GACjBhE,MAAOgE,IAFD1L,KAfe,EAoBH6B,YAClB+M,GACA,CAAE5H,eAAgB,CAAC,0BAFd8K,EApBgB,oBAyBvB,OACE,oCACE,kBAAC,GAAD,CACE5U,OAAQA,EACRwI,eAAgB,SAAC/F,GAAD,OAAO0O,EAAU1O,EAAEuB,OAAOrE,UAE5C,yBAAK6D,UAAW5B,EAAQxB,MACtB,kBAAC,GAAD,CACE6L,MAAO,CACL,CAAE1C,KAAM,WAAYnL,KAAM,SAC1B,CAAEmL,KAAM,UAAWnL,KAAK,YAAD,OAAcqQ,EAAd,aACvB,CAAElF,KAAM,gBAGZ,kBAAC9F,EAAA,EAAD,CAAYD,UAAW5B,EAAQ0R,YAAazP,QAAQ,MAApD,OACGgL,QADH,IACGA,GADH,UACGA,EAAQA,cADX,aACG,EAAgBtF,MAEnB,kBAAC9F,EAAA,EAAD,CAAYD,UAAW5B,EAAQ2R,mBAA/B,OACG1E,QADH,IACGA,GADH,UACGA,EAAQA,cADX,aACG,EAAgBzE,aAEjBE,EAqDE,KApDF,yBAAK9G,UAAW5B,EAAQoN,WACtB,kBAACY,GAAA,EAAD,CACEpM,UAAW5B,EAAQuR,cACnB0B,kBAAgB,EAChBhF,QAAO,iBAAElF,QAAF,IAAEA,OAAF,EAAEA,EAASA,QAAQ4G,eAAnB,QAA8B,GACrCzB,eAAgB,SAACC,GAAD,OAAYA,EAAOxG,MACnCyG,kBAAmB,SAACD,GAAD,QACjBsE,GAAetE,EAAOZ,OAASkF,EAAalF,MAE9CpL,SAAU,SAACtB,EAAG9C,GAAJ,OACR+U,EAAe,OAAC/U,QAAD,IAACA,IAASqU,KAE3BrU,MAAO0U,EACPpE,YAAU,EACVC,YAAa,SAACrG,GAAD,OACX,kBAACnG,EAAA,EAAD,iBACMmG,EADN,CAEEuB,WAAS,EACTxH,YAAY,cACZC,QAAQ,iBAId,kBAACgF,GAAA,EAAD,CACErF,UAAW5B,EAAQwR,aACnBlP,QAAS,WACPwQ,EAAgBN,GAChBO,EAAiBN,KAGnB,kBAAC,KAAD,OAEF,kBAACzE,GAAA,EAAD,CACEpM,UAAW5B,EAAQuR,cACnB0B,kBAAgB,EAChBhF,QAAO,iBAAElF,QAAF,IAAEA,OAAF,EAAEA,EAASA,QAAQ4G,eAAnB,QAA8B,GACrCzB,eAAgB,SAACC,GAAD,OAAYA,EAAOxG,MACnCyG,kBAAmB,SAACD,GAAD,OAAYA,EAAOZ,OAASiF,EAAcjF,MAC7DpL,SAAU,SAACtB,EAAG9C,GAAJ,aACRgV,EAAgB,UAACG,KAAKnV,EAAO,qBAAb,QAA8BqU,KAEhDrU,MAAOyU,EACPlE,YAAa,SAACrG,GAAD,OACX,kBAACnG,EAAA,EAAD,iBACMmG,EADN,CAEEuB,WAAS,EACTxH,YAAY,cACZC,QAAQ,kBAMjBwQ,EAAalF,KAAK/C,OAAS,GAAKgI,EAAcjF,KAAK/C,OAAS,EAC3D,oCACE,yBAAK5I,UAAW5B,EAAQyR,kBACtB,kBAAClP,EAAA,EAAD,CACEnD,MAAM,UACNkD,QAAS,kBACP/B,EAAQc,KAAR,mBACcwL,EADd,mBACkCD,EADlC,oBAIFuG,UAAW,kBAAC,KAAD,MACXlR,QAAQ,aARV,QAFJ,OAeGgL,QAfH,IAeGA,OAfH,EAeGA,EAAQA,OAAOmG,KACb7O,QAAO,SAACkG,GAAD,OACNA,EAAE9C,KAAK8H,cAAcC,SAAStR,EAAOqR,kBAEtC4D,UACA1I,KAAI,SAACF,GACJ,IAAM6I,EAA0B7I,EAAE8I,aAAahP,QAC7C,SAACiP,GAAD,OAAOA,EAAEzF,OAAOhG,KAAO0K,EAAa1K,MAEhCuK,EACJgB,EAAwB9I,OAAS,EAC7B8I,EAAwB,GACxB,KAEAG,EAA2BhJ,EAAE8I,aAAahP,QAC9C,SAACiP,GAAD,OAAOA,EAAEzF,OAAOhG,KAAOyK,EAAczK,MAEjCwK,EACJkB,EAAyBjJ,OAAS,EAC9BiJ,EAAyB,GACzB,KACN,OACE,kBAAC,GAAD,CACEjM,IAAKiD,EAAE1C,GACP4D,EAAGlB,EAAE9C,KACLuI,OAAQzF,EAAEyF,OACVoC,gBAAiBA,EACjBC,iBAAkBA,EAClBG,WAAY,kBACVnS,EAAQc,KAAR,mBACcwL,EADd,mBACkCD,EADlC,0BAC4DnC,EAAE1C,MAGhE0K,aAAcA,EACdD,cAAeA,EACfG,oBAAqB,kBACnBL,EACI/R,EAAQc,KAAR,mBACcwL,EADd,mBACkCD,EADlC,0BAC4DnC,EAAE1C,GAD9D,mBAC2E0K,EAAa1K,GADxF,wBAC0GuK,EAAgBvK,KAE1HxH,EAAQc,KAAR,mBACcwL,EADd,mBACkCD,EADlC,0BAC4DnC,EAAE1C,GAD9D,mBAC2E0K,EAAa1K,GADxF,kBAIN6K,qBAAsB,kBACpBL,EACIhS,EAAQc,KAAR,mBACcwL,EADd,mBACkCD,EADlC,0BAC4DnC,EAAE1C,GAD9D,mBAC2EyK,EAAczK,GADzF,wBAC2GwK,EAAiBxK,KAE5HxH,EAAQc,KAAR,mBACcwL,EADd,mBACkCD,EADlC,0BAC4DnC,EAAE1C,GAD9D,mBAC2EyK,EAAczK,GADzF,kBAIN8K,YAAW,sBAAE,sBAAA/R,EAAA,sEACLkS,EAAU,CAAE/R,UAAW,CAAE8G,GAAI0C,EAAE1C,MAD1B,yFAOrB,MAEN,kBAAC,IAAD,CACEnD,OAAK,EACLpI,KAAK,qDACLqI,UAAWsL,KAEb,kBAAC,IAAD,CACEvL,OAAK,EACLpI,KAAK,4DACLqI,UAAWsL,KAEb,kBAAC,IAAD,CACEvL,OAAK,EACLpI,KAAK,yFACLqI,UAAWoM,KAEb,kBAAC,IAAD,CACErM,OAAK,EACLpI,KAAK,wGACLqI,UAAWoM,OCpTb5S,GAAYC,YAAW,CAC3BE,KAAM,CACJC,MAAO,OACPC,OAAQ,OACR2F,WAAY,8CACZF,MAAO,QACPxF,QAAS,OACTG,WAAY,SACZD,eAAgB,UAElByF,MAAO,CACLC,OAAQ,kBACR9F,MAAO,KAETiV,SAAU,CACRtU,MAAO,WAcIuU,GAVoB,WACjC,IAAM3T,EAAU3B,KAChB,OACE,yBAAKuD,UAAW5B,EAAQxB,MACtB,yBAAKoD,UAAW5B,EAAQsE,MAAOQ,IAAI,wBAAwBC,IAAI,KAC/D,kBAAC3B,EAAA,EAAD,CAAkBxB,UAAW5B,EAAQ0T,SAAUrQ,KAAM,OCP3D,SAASuQ,KACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOpX,KAAK,IAAIqI,UAAWF,OAKnC,SAASkP,KACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOjP,OAAK,EAACpI,KAAK,IAAIqI,WAjBPiP,EAiBgC,QAhB9C,kBAAM,kBAAC,IAAD,CAAUA,GAAIA,QAiBrB,kBAAC,IAAD,CAAOtX,KAAK,QAAQqI,UAAWkP,KAC/B,kBAAC,IAAD,CAAOvX,KAAK,YAAYqI,UAAWmP,KACnC,kBAAC,IAAD,CAAOxX,KAAK,uBAAuBqI,UAAWoP,KAC9C,kBAAC,IAAD,CACEzX,KAAK,iDACLqI,UAAWqP,KAEb,kBAAC,IAAD,CAAUJ,GAAG,YAzBC,IAACA,EAmDRK,OApBf,WAAgB,IACNzY,EAAS4E,qBAAW9C,GAApB9B,KADK,EAEuBuE,oBAAS,GAFhC,mBAENmU,EAFM,KAEMC,EAFN,OAGqBpU,oBAAS,GAH9B,mBAGNqU,EAHM,KAGKC,EAHL,KAcb,OATA/S,qBAAU,YACR,OAAI9F,QAAJ,IAAIA,OAAJ,EAAIA,EAAMK,aACRsY,GAAc,GAEdA,GAAc,GAEhBE,GAAa,KACZ,CAAC7Y,IAEA4Y,EACK,kBAACE,GAAD,MAEFJ,EAAa,kBAACP,GAAD,MAAoB,kBAACD,GAAD,O,OCpDtB7J,QACW,cAA7BrN,OAAOC,SAAS8X,UAEe,UAA7B/X,OAAOC,SAAS8X,UAEhB/X,OAAOC,SAAS8X,SAASC,MACvB,2DCVNC,EAAQ,KAAUC,SAElB/X,QAAQC,IAAIzB,UACZwB,QAAQC,IAAIzB,qCACZwB,QAAQC,IAAIzB,cAEZwZ,IAASC,OACP,kBAAC,IAAD,CAAgB/X,OAAQA,GACtB,kBAAC,EAAD,KACE,kBAAC,GAAD,QAIJgY,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzL,GACLjN,QAAQiN,MAAMA,EAAMxN,c","file":"static/js/main.9d735993.chunk.js","sourcesContent":["import { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_API_BASE_URL,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const user = JSON.parse(localStorage.getItem(\"user\") ?? \"\");\n  if (typeof user === \"object\") {\n    if (typeof user.accessToken === \"string\") {\n      return {\n        headers: {\n          ...headers,\n          authorization: user.accessToken ? `Bearer ${user.accessToken}` : \"\",\n        },\n      };\n    }\n  }\n  return {\n    headers: {\n      ...headers,\n    },\n  };\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      if (message === \"TokenExpiredError\") {\n        localStorage.clear();\n        window.location.href = \"/\";\n      }\n    });\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst client = new ApolloClient({\n  // link: authLink.concat(httpLink),\n  link: ApolloLink.from([authLink, errorLink, httpLink]),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React from \"react\";\nimport createPersistedState from \"use-persisted-state\";\nexport const useUserState = createPersistedState(\"user\");\n\ntype User =\n  | {\n      id?: string;\n      email?: string;\n      firstName?: string;\n      lastName?: string;\n      accessToken?: string;\n    }\n  | null\n  | undefined;\n\ninterface UserContextState {\n  user: User;\n  setUser: (user?: User) => void;\n}\n\nexport const UserContext = React.createContext<UserContextState>({\n  user: {},\n  setUser: () => undefined,\n});\n\nexport const UserProvider: React.SFC<{}> = ({ children }) => {\n  const [user, setUser] = useUserState<User>({});\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  query LoginPage_login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      accessToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n","import { useLocation } from \"react-router-dom\";\n\nexport function useURLQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import React, { useContext, useCallback, useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../../../context/UserContext\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport loginQuery from \"./gql\";\nimport { useURLQuery } from \"../../../hooks/useURLQuery\";\nimport gql from \"graphql-tag\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  input: {\n    margin: 8,\n    width: \"80%\",\n  },\n  password: {\n    marginBottom: 0,\n    width: \"80%\",\n  },\n  errorText: {\n    color: \"red\",\n  },\n\n  forgotPassword: {\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n    fontSize: 12,\n    color: theme.palette.primary.main,\n    margin: \"4px 0\",\n    textAlign: \"right\",\n    width: \"80%\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n}));\n\nconst TEST_QUERY = gql`\n  query LoginPage_test {\n    test\n  }\n`;\n\nconst Login: React.FC<any> = (props) => {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorText, setErrorText] = useState(\"\");\n  const { setUser } = useContext(UserContext);\n  const history = useHistory();\n  const client = useApolloClient();\n  const query = useURLQuery();\n\n  const login = useCallback(\n    async (e) => {\n      e.preventDefault();\n      try {\n        const { data } = await client.query({\n          query: loginQuery,\n          variables: { email, password },\n        });\n\n        setUser({ ...data.login.user, accessToken: data.login.accessToken });\n        const redirectUrl = query.get(\"redirectUrl\");\n        if (redirectUrl) {\n          history.push(redirectUrl);\n        } else {\n          history.push(\"/home\");\n        }\n      } catch (err) {\n        setErrorText(err?.graphQLErrors[0]?.message ?? \"\");\n      }\n    },\n    [email, password, setUser, history, client, query]\n  );\n\n  const goTo = useCallback(\n    (url) => {\n      return () => history.push(url);\n    },\n    [history]\n  );\n\n  useEffect(() => {\n    const startQuery = async () => {\n      const { data: data2 } = await client.query({ query: TEST_QUERY });\n      console.log(\">>>>\", data2);\n    };\n    startQuery();\n  }, []);\n\n  return (\n    <form onSubmit={login} className={classes.root}>\n      <Typography className={classes.errorText}>{errorText}</Typography>\n      <TextField\n        className={classes.input}\n        label=\"Email\"\n        placeholder=\"John.Doe@gmail.com\"\n        variant=\"outlined\"\n        type=\"email\"\n        value={email}\n        onChange={(e) => {\n          setEmail(e.target.value);\n          setErrorText(\"\");\n        }}\n      />\n      <TextField\n        className={clsx(classes.input, classes.password)}\n        label=\"Password\"\n        placeholder=\"*******\"\n        variant=\"outlined\"\n        type=\"password\"\n        value={password}\n        onChange={(e) => {\n          setPassword(e.target.value);\n          setErrorText(\"\");\n        }}\n      />\n      <Typography\n        onClick={goTo(\"/forgotPassword\")}\n        className={classes.forgotPassword}\n      >\n        Forgot password?\n      </Typography>\n\n      <Button\n        type=\"submit\"\n        className={classes.input}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Login\n      </Button>\n      <Button\n        onClick={goTo(\"/register\")}\n        className={classes.input}\n        color=\"primary\"\n      >\n        Register\n      </Button>\n    </form>\n  );\n};\n\nexport default Login;\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  mutation RegisterPage_upsertUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n  ) {\n    upsertUser(\n      data: { firstName: $firstName, lastName: $lastName, email: $email }\n    ) {\n      id\n      email\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import React, { useCallback, useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  Typography,\n  Theme,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport upsertUserMutation from \"./gql\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { RegisterPage_UpsertUserMutation } from \"../../../generated/graphql\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  input: {\n    margin: 8,\n    width: \"80%\",\n  },\n  password: {\n    marginBottom: 0,\n    width: \"80%\",\n  },\n  successText: {\n    color: \"darkgreen\",\n  },\n  errorText: {\n    color: \"red\",\n  },\n\n  forgotPassword: {\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n    fontSize: 12,\n    color: theme.palette.primary.main,\n    margin: \"4px 0\",\n    textAlign: \"right\",\n    width: \"80%\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n}));\n\nconst Register: React.SFC<any> = (props) => {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstname] = useState(\"\");\n  const [lastName, setLastname] = useState(\"\");\n  const [successText, setSuccessText] = useState(\"\");\n  const [errorText, setErrorText] = useState(\"\");\n  const history = useHistory();\n  const [\n    upsertUser,\n    { loading: upsertUserLoading },\n  ] = useMutation<RegisterPage_UpsertUserMutation>(upsertUserMutation);\n\n  const login = useCallback(\n    async (e) => {\n      e.preventDefault();\n      try {\n        await upsertUser({ variables: { email, firstName, lastName } });\n        setSuccessText(\"Check your email to set your password\");\n      } catch (err) {\n        if (err?.graphQLErrors[0]?.message) {\n          setErrorText(\n            err?.graphQLErrors[0]?.message ? \"User already exists\" : \"\"\n          );\n        } else {\n          setErrorText(\"Server error\");\n        }\n      }\n    },\n    [email, firstName, lastName, upsertUser]\n  );\n\n  const goTo = useCallback(\n    (url) => {\n      return () => history.push(url);\n    },\n    [history]\n  );\n\n  return (\n    <form onSubmit={login} className={classes.root}>\n      <Typography className={classes.successText}>{successText}</Typography>\n      <Typography className={classes.errorText}>{errorText}</Typography>\n      <TextField\n        className={classes.input}\n        label=\"First name\"\n        placeholder=\"John\"\n        variant=\"outlined\"\n        type=\"text\"\n        value={firstName}\n        onChange={(e) => {\n          setFirstname(e.target.value);\n          setErrorText(\"\");\n          setSuccessText(\"\");\n        }}\n      />\n      <TextField\n        className={classes.input}\n        label=\"Last name\"\n        placeholder=\"Doe\"\n        variant=\"outlined\"\n        type=\"text\"\n        value={lastName}\n        onChange={(e) => {\n          setLastname(e.target.value);\n          setErrorText(\"\");\n          setSuccessText(\"\");\n        }}\n      />\n      <TextField\n        className={classes.input}\n        label=\"Email\"\n        placeholder=\"John.Doe@gmail.com\"\n        variant=\"outlined\"\n        type=\"email\"\n        value={email}\n        onChange={(e) => {\n          setEmail(e.target.value);\n          setErrorText(\"\");\n          setSuccessText(\"\");\n        }}\n      />\n      <Button\n        type=\"submit\"\n        className={classes.input}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        {upsertUserLoading ? (\n          <CircularProgress size={24} color=\"secondary\" />\n        ) : (\n          \"Register\"\n        )}\n      </Button>\n      <Button\n        onClick={goTo(\"/login\")}\n        className={classes.input}\n        color=\"primary\"\n      >\n        Go to Login\n      </Button>\n    </form>\n  );\n};\n\nexport default Register;\n","import React, { useCallback, useState } from \"react\";\nimport { TextField, Button, Typography, Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  input: {\n    margin: 8,\n    width: \"80%\",\n  },\n  errorText: {\n    color: \"red\",\n  },\n  successText: {\n    color: \"darkgreen\",\n  },\n}));\n\nconst ForgotPassword: React.SFC<any> = (props) => {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\");\n  const [errorText, setErrorText] = useState(\"\");\n  const [successText, setSuccessText] = useState(\"\");\n  const history = useHistory();\n\n  const sendEmail = useCallback(\n    async (e) => {\n      e.preventDefault();\n      try {\n        await axios.post(\n          `${process.env.REACT_APP_API_BASE_URL}/forgotPassword`,\n          //??? 주소가 어떻게 되는건지 불확실\n          {\n            email,\n          }\n        );\n        setSuccessText(\"Check your email please!\");\n      } catch (err) {\n        setErrorText(\"Server error\");\n      }\n    },\n    [email]\n  );\n\n  const goTo = useCallback(\n    (url) => {\n      return () => history.push(url);\n    },\n    [history]\n  );\n\n  return (\n    <form onSubmit={sendEmail} className={classes.root}>\n      <Typography className={classes.successText}>{successText}</Typography>\n      <Typography className={classes.errorText}>{errorText}</Typography>\n      <TextField\n        className={classes.input}\n        label=\"Email\"\n        placeholder=\"John.Doe@gmail.de\"\n        variant=\"outlined\"\n        type=\"email\"\n        value={email}\n        onChange={(e) => {\n          setEmail(e.target.value);\n          setErrorText(\"\");\n          setSuccessText(\"\");\n        }}\n      />\n      <Button\n        type=\"submit\"\n        className={classes.input}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Send email\n      </Button>\n      <Button\n        onClick={goTo(\"/login\")}\n        className={classes.input}\n        color=\"primary\"\n      >\n        Go to Login\n      </Button>\n    </form>\n  );\n};\n\nexport default ForgotPassword;\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  mutation RedefinePasswordPage_resetPassword(\n    $password: String!\n    $token: String!\n  ) {\n    resetPassword(password: $password, token: $token) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        createdAt\n        updatedAt\n      }\n      accessToken\n    }\n  }\n`;\n","import React, { useCallback, useState, useContext } from \"react\";\nimport { TextField, Button, Typography, Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { useURLQuery } from \"../../../hooks/useURLQuery\";\nimport redefinePasswordMutation from \"./gql\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { UserContext } from \"../../../context/UserContext\";\nimport { RedefinePasswordPage_ResetPasswordMutation } from \"../../../generated/graphql\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  input: {\n    margin: 8,\n    width: \"80%\",\n  },\n  successText: {\n    color: \"darkgreen\",\n  },\n  errorText: {\n    color: \"red\",\n  },\n  forgotPassword: {\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n    fontSize: 12,\n    color: theme.palette.primary.main,\n    margin: \"4px 0\",\n    textAlign: \"right\",\n    width: \"80%\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n}));\n\nconst RedefinePassword: React.SFC<any> = (props) => {\n  const classes = useStyles();\n  const [password, setPassword] = useState(\"\");\n  const [repeatPassword, setRepeatPassword] = useState(\"\");\n  const [errorText, setErrorText] = useState(\"\");\n  const [successText, setSuccessText] = useState(\"\");\n  const history = useHistory();\n  const query = useURLQuery();\n  const [redefinePassword] = useMutation<\n    RedefinePasswordPage_ResetPasswordMutation\n  >(redefinePasswordMutation);\n  const { setUser } = useContext(UserContext);\n\n  const handleSubmit = useCallback(\n    async (e) => {\n      e.preventDefault();\n      if (password === repeatPassword) {\n        try {\n          const { data } = await redefinePassword({\n            variables: {\n              password,\n              token: query.get(\"token\"),\n            },\n          });\n          if (data?.resetPassword) {\n            setUser({\n              ...data.resetPassword.user,\n              accessToken: data.resetPassword.accessToken,\n            });\n            history.push(\"/home\");\n          } else {\n            setSuccessText(\"Password defined\");\n          }\n        } catch (err) {\n          setErrorText(\"Server error\");\n        }\n      } else {\n        setErrorText(\"Passwords do not match\");\n      }\n    },\n    [password, query, setUser, history, redefinePassword, repeatPassword]\n  );\n\n  const goTo = useCallback(\n    (url) => {\n      return () => history.push(url);\n    },\n    [history]\n  );\n\n  return (\n    <form onSubmit={handleSubmit} className={classes.root}>\n      <Typography className={classes.successText}>{successText}</Typography>\n      <Typography className={classes.errorText}>{errorText}</Typography>\n      <TextField\n        className={classes.input}\n        label=\"Password\"\n        placeholder=\"*******\"\n        variant=\"outlined\"\n        type=\"password\"\n        value={password}\n        onChange={(e) => {\n          setPassword(e.target.value);\n          setErrorText(\"\");\n        }}\n      />\n      <TextField\n        className={classes.input}\n        label=\"Repeat password\"\n        placeholder=\"*******\"\n        variant=\"outlined\"\n        type=\"password\"\n        value={repeatPassword}\n        onChange={(e) => {\n          setRepeatPassword(e.target.value);\n          setErrorText(\"\");\n        }}\n      />\n      <Button\n        type=\"submit\"\n        className={classes.input}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Redefine password\n      </Button>\n      <Button\n        onClick={goTo(\"/login\")}\n        className={classes.input}\n        color=\"primary\"\n      >\n        Go to Login\n      </Button>\n    </form>\n  );\n};\n\nexport default RedefinePassword;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { Route, useHistory } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport ForgotPassword from \"./ForgotPassword\";\nimport RedefinePassword from \"./RedefinePassword\";\nimport { useEffect } from \"react\";\nimport { useURLQuery } from \"../../hooks/useURLQuery\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  left: {\n    width: \"40%\",\n    height: \"100%\",\n    float: \"left\",\n  },\n  right: {\n    width: \"60%\",\n    height: \"100%\",\n    background: \"linear-gradient(to right, #3a6073, #3a7bd5)\",\n    float: \"right\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  image: {\n    filter: \"brightness(100)\",\n    width: 250,\n  },\n});\n\nconst PublicFrame: React.SFC<{}> = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.left}>\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/forgotPassword\" component={ForgotPassword} />\n        <Route path=\"/redefinePassword\" component={RedefinePassword} />\n        <Route component={RedirectLink} />\n      </div>\n      <div className={classes.right}>\n        <img className={classes.image} src=\"/softgarden_white.png\" alt=\"\" />\n      </div>\n    </div>\n  );\n};\n\nconst RedirectLink = () => {\n  const history = useHistory();\n  const query = useURLQuery();\n  useEffect(() => {\n    if (!query.get(\"redirectUrl\")) {\n      history.replace(`/login?redirectUrl=${window.location.pathname}`);\n    } else {\n      history.replace(`/login`);\n    }\n  }, []);\n  return <></>;\n};\n\nexport default PublicFrame;\n","import React from \"react\";\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  fade,\n} from \"@material-ui/core/styles\";\nimport {\n  IconButton,\n  Typography,\n  Toolbar,\n  AppBar,\n  InputBase,\n} from \"@material-ui/core\";\n\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { useHistory } from \"react-router-dom\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      cursor: \"pointer\",\n    },\n    spacer: {\n      flex: 2,\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(3),\n        width: \"auto\",\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    inputRoot: {\n      color: \"inherit\",\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"20ch\",\n      },\n    },\n  })\n);\n\ninterface CustomAppBarProps {\n  onSearchChange?: (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => void;\n  search?: String;\n}\n\nconst CustomAppBar: React.SFC<CustomAppBarProps> = ({\n  onSearchChange,\n  search,\n}) => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography\n            onClick={() => history.push(\"/\")}\n            variant=\"h6\"\n            className={classes.title}\n          >\n            Translate me!\n          </Typography>\n          <div className={classes.spacer} />\n\n          {onSearchChange ? (\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon />\n              </div>\n              <InputBase\n                onChange={onSearchChange}\n                placeholder=\"Search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ \"aria-label\": \"search\" }}\n              />\n            </div>\n          ) : null}\n          <div className={classes.spacer} />\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => history.push(\"/settings\")}\n          >\n            <SettingsIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default CustomAppBar;\n","import gql from \"graphql-tag\";\n\nexport const projectsQuery = gql`\n  query ProjectFormModal_project($id: ID!) {\n    project(where: { id: $id }) {\n      id\n      key\n      name\n      description\n    }\n  }\n`;\n\nexport const upsertProjectMutation = gql`\n  mutation ProjectFormModal_upsertProject(\n    $id: ID\n    $key: String!\n    $name: String!\n    $description: String!\n  ) {\n    upsertProject(\n      data: { key: $key, name: $name, description: $description }\n      where: { id: $id }\n    ) {\n      id\n      key\n      name\n      description\n    }\n  }\n`;\n","import React, { useState } from \"react\";\n\nimport {\n  makeStyles,\n  Theme,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { projectsQuery, upsertProjectMutation } from \"./gql\";\nimport {\n  ProjectFormModal_ProjectQuery,\n  ProjectFormModal_UpsertProjectMutation,\n} from \"../../../generated/graphql\";\n\nconst validationSchema = yup.object({\n  key: yup.string().min(1, \"Must be 1 characters or more\").required(\"Required\"),\n  name: yup\n    .string()\n    .min(3, \"Must be 3 characters or more\")\n    .required(\"Required\"),\n});\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: 400,\n  },\n  input: {\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nconst ProjectFormModal = () => {\n  const [open, setOpen] = useState(true);\n  const history = useHistory();\n  const {\n    params: { id },\n  } = useRouteMatch();\n  const classes = useStyles();\n\n  const [upsertProject, { loading: upsertProjectLoading }] = useMutation<\n    ProjectFormModal_UpsertProjectMutation\n  >(upsertProjectMutation, { refetchQueries: [\"HomePage_projects\"] });\n\n  const formik = useFormik({\n    initialValues: {\n      key: \"\",\n      name: \"\",\n      description: \"\",\n    },\n    validationSchema,\n    onSubmit: async (values) => {\n      await upsertProject({ variables: { ...values, id } });\n      history.push(\"/home\");\n    },\n  });\n\n  const { loading: projectLoading } = useQuery<ProjectFormModal_ProjectQuery>(\n    projectsQuery,\n    {\n      variables: { id },\n      skip: !id,\n      onCompleted: (data) => {\n        if (data) {\n          formik.setValues(data.project);\n        }\n      },\n    }\n  );\n\n  return (\n    <Dialog\n      classes={{ paper: classes.root }}\n      open={open}\n      onClose={() => setOpen(false)}\n      onExited={() => history.push(\"/home\")}\n      disableBackdropClick={upsertProjectLoading}\n      disableEscapeKeyDown={upsertProjectLoading}\n    >\n      <DialogTitle>Project</DialogTitle>\n      {projectLoading ? (\n        <CircularProgress />\n      ) : (\n        <form onSubmit={formik.handleSubmit}>\n          <>\n            <DialogContent>\n              <TextField\n                id=\"key\"\n                className={classes.input}\n                autoFocus\n                label=\"Key\"\n                placeholder=\"A serious key.\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.key}\n                helperText={formik.touched.key ? formik.errors.key : \"\"}\n                error={formik.touched.key && Boolean(formik.errors.key)}\n              />\n              <TextField\n                id=\"name\"\n                className={classes.input}\n                label=\"Name\"\n                placeholder=\"My awesome project!\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.name}\n                helperText={formik.touched.name ? formik.errors.name : \"\"}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n              />\n              <TextField\n                id=\"description\"\n                className={classes.input}\n                multiline\n                rows={3}\n                label=\"Description\"\n                placeholder=\"I'm awesome thats all.\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.description}\n                helperText={\n                  formik.touched.description ? formik.errors.description : \"\"\n                }\n                error={\n                  formik.touched.description &&\n                  Boolean(formik.errors.description)\n                }\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                onClick={() => setOpen(false)}\n                color=\"primary\"\n                disabled={upsertProjectLoading}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                disabled={upsertProjectLoading}\n              >\n                {upsertProjectLoading ? (\n                  <CircularProgress size={10} />\n                ) : id ? (\n                  \"Edit\"\n                ) : (\n                  \"Add\"\n                )}\n              </Button>\n            </DialogActions>\n          </>\n        </form>\n      )}\n    </Dialog>\n  );\n};\n\nexport default ProjectFormModal;\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  query HomePage_projects {\n    projects {\n      id\n      key\n      name\n      description\n    }\n  }\n`;\n","import React from \"react\";\nimport { Breadcrumbs, Link, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\ntype Paths = Array<{\n  name: String;\n  path?: String;\n}>;\n\ninterface CustomBreadcrumbsProps {\n  paths: Paths;\n}\n\nexport const CustomBreadcrumbs: React.SFC<CustomBreadcrumbsProps> = ({\n  paths,\n}) => {\n  const history = useHistory();\n  const handleClick = useCallback(\n    (path) => {\n      return () => history.push(path);\n    },\n    [history]\n  );\n  return (\n    <Breadcrumbs>\n      {paths.length > 1\n        ? paths\n            .filter((i, ind) => ind !== paths.length - 1)\n            .map((i, ind) => (\n              <Link key={ind} color=\"inherit\" onClick={handleClick(i.path)}>\n                {i.name}\n              </Link>\n            ))\n        : null}\n      {paths.length > 0 ? (\n        <Typography color=\"textPrimary\">\n          {paths[paths.length - 1].name}\n        </Typography>\n      ) : null}\n    </Breadcrumbs>\n  );\n};\n\nexport default CustomBreadcrumbs;\n","import React from \"react\";\n\nimport AppBar from \"../../../smartComponents/AppBar\";\nimport {\n  Typography,\n  makeStyles,\n  Theme,\n  Card,\n  CardHeader,\n  Button,\n  CardContent,\n  CardActions,\n  IconButton,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { useHistory, Route } from \"react-router-dom\";\nimport ProjectFormModal from \"../ProjectFormModal\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport projectsQuery from \"./gql\";\nimport { HomePage_ProjectsQuery } from \"../../../generated/graphql\";\nimport CustomBreadcrumbs from \"../../../components/Breadcrumbs\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.default,\n    height: \"calc(100% - 115px)\",\n  },\n  addCard: {\n    width: 300,\n    minWidth: 300,\n    backgroundColor: theme.palette.background.default,\n    boxShadow: \"none\",\n    border: \"dashed grey 1px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    margin: theme.spacing(3),\n    minHeight: 167,\n  },\n  title: {\n    marginBottom: theme.spacing(3),\n  },\n  projectsContainer: {\n    display: \"flex\",\n    flexFlow: \"row wrap\",\n  },\n  languageCard: {\n    maxHeight: 200,\n    width: 300,\n    minWidth: 300,\n    margin: theme.spacing(3),\n  },\n  languageCardSkeleton: {\n    maxHeight: 200,\n    width: 300,\n    minWidth: 300,\n    margin: theme.spacing(3),\n  },\n}));\n\nconst HomePage = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const { data: projects, loading: projectsLoading } = useQuery<\n    HomePage_ProjectsQuery\n  >(projectsQuery);\n  return (\n    <>\n      <AppBar />\n      <div className={classes.root}>\n        <CustomBreadcrumbs paths={[{ name: \"Projects\" }]} />\n        <div className={classes.projectsContainer}>\n          {projectsLoading ? (\n            <ProjectCard loading />\n          ) : (\n            projects?.projects?.map((i) => (\n              <ProjectCard\n                key={i?.id ?? \"\"}\n                k={i?.key ?? \"\"}\n                name={i?.name ?? \"\"}\n                description={i?.description ?? \"\"}\n                onEditClick={() => history.push(`/home/project/${i?.id}`)}\n                onTranslateClick={() =>\n                  history.push(`/project/${i?.id}/screens`)\n                }\n              />\n            ))\n          )}\n\n          <AddCard onClick={() => history.push(\"/home/project\")} />\n        </div>\n        <Route exact path=\"/home/project\" component={ProjectFormModal} />\n        <Route exact path=\"/home/project/:id\" component={ProjectFormModal} />\n      </div>\n    </>\n  );\n};\n\ninterface AddCardProps {\n  onClick: () => void;\n}\n\nconst AddCard: React.SFC<AddCardProps> = ({ onClick, children }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.addCard} onClick={onClick}>\n      <AddIcon />\n    </Card>\n  );\n};\n\ninterface ProjectCardProps {\n  k?: string;\n  name?: string;\n  description?: string;\n  onEditClick?: () => void;\n  onTranslateClick?: () => void;\n  loading?: boolean;\n}\n\nconst ProjectCard: React.SFC<ProjectCardProps> = ({\n  k,\n  name,\n  description,\n  onEditClick,\n  onTranslateClick,\n  loading,\n}) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.languageCard}>\n      <CardHeader\n        title={\n          loading ? (\n            <Skeleton animation=\"wave\" variant=\"rect\" width={200} height={32} />\n          ) : (\n            `${k} - ${name}`\n          )\n        }\n        action={\n          loading ? (\n            <Skeleton\n              animation=\"wave\"\n              variant=\"circle\"\n              width={48}\n              height={48}\n            />\n          ) : (\n            <IconButton onClick={onEditClick}>\n              <EditIcon />\n            </IconButton>\n          )\n        }\n      />\n      <CardContent>\n        {loading ? (\n          <Skeleton animation=\"wave\" variant=\"rect\" width={230} height={25} />\n        ) : (\n          <Typography noWrap>{description}</Typography>\n        )}\n      </CardContent>\n      <CardActions>\n        {loading ? (\n          <Skeleton animation=\"wave\" variant=\"rect\" width={90} height={20} />\n        ) : (\n          <Button\n            size=\"small\"\n            type=\"submit\"\n            color=\"primary\"\n            onClick={onTranslateClick}\n          >\n            Translate\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default HomePage;\n","import React, { useContext } from \"react\";\n\nimport AppBar from \"../../../smartComponents/AppBar\";\nimport { UserContext } from \"../../../context/UserContext\";\nimport { makeStyles, Theme, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.default,\n    height: \"calc(100% - 115px)\",\n  },\n}));\n\nconst SettingsPage = () => {\n  const classes = useStyles();\n  const { setUser } = useContext(UserContext);\n\n  return (\n    <>\n      <AppBar />\n      <div className={classes.root}>\n        <Button\n          onClick={() => {\n            setUser({});\n            window.location.href = \"/login\";\n          }}\n        >\n          Logout\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default SettingsPage;\n","import gql from \"graphql-tag\";\n\nexport const projectsQuery = gql`\n  query Screen_project($id: ID!) {\n    project(where: { id: $id }) {\n      id\n      key\n      name\n      description\n      screens {\n        id\n        name\n      }\n      locales {\n        id\n        name\n      }\n    }\n  }\n`;\n","import gql from \"graphql-tag\";\n\nexport const screensQuery = gql`\n  query ScreenFormModal_screen($id: ID!) {\n    screen(where: { id: $id }) {\n      id\n      key\n      name\n      description\n    }\n  }\n`;\n\nexport const upsertScreenMutation = gql`\n  mutation ScreenFormModal_upsertScreen(\n    $id: ID\n    $key: String!\n    $name: String!\n    $description: String!\n    $projectId: ID!\n  ) {\n    upsertScreen(\n      data: {\n        key: $key\n        name: $name\n        description: $description\n        projectId: $projectId\n      }\n      where: { id: $id }\n    ) {\n      id\n      key\n      name\n      description\n    }\n  }\n`;\n","import React, { useState } from \"react\";\n\nimport {\n  makeStyles,\n  Theme,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { screensQuery, upsertScreenMutation } from \"./gql\";\nimport {\n  ScreenFormModal_ScreenQuery,\n  ScreenFormModal_UpsertScreenMutation,\n} from \"../../../generated/graphql\";\n\nconst validationSchema = yup.object({\n  key: yup.string().min(1, \"Must be 1 characters or more\").required(\"Required\"),\n  name: yup\n    .string()\n    .min(3, \"Must be 3 characters or more\")\n    .required(\"Required\"),\n});\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: 400,\n  },\n  input: {\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nconst ScreenFormModal = () => {\n  const [open, setOpen] = useState(true);\n  const history = useHistory();\n  const {\n    params: { screenId, projectId },\n  } = useRouteMatch();\n  const classes = useStyles();\n\n  const [upsertScreen, { loading: upsertScreenLoading }] = useMutation<\n    ScreenFormModal_UpsertScreenMutation\n  >(upsertScreenMutation, { refetchQueries: [\"Screen_project\"] });\n\n  const formik = useFormik({\n    initialValues: {\n      key: \"\",\n      name: \"\",\n      description: \"\",\n    },\n    validationSchema,\n    onSubmit: async (values) => {\n      await upsertScreen({ variables: { ...values, id: screenId, projectId } });\n      history.push(`/project/${projectId}/screens`);\n    },\n  });\n\n  const { loading: screenLoading } = useQuery<ScreenFormModal_ScreenQuery>(\n    screensQuery,\n    {\n      variables: { id: screenId },\n      skip: !screenId,\n      onCompleted: (data) => {\n        if (data) {\n          formik.setValues(data.screen);\n        }\n      },\n    }\n  );\n\n  return (\n    <Dialog\n      classes={{ paper: classes.root }}\n      open={open}\n      onClose={() => setOpen(false)}\n      onExited={() => history.push(`/project/${projectId}/screens`)}\n      disableBackdropClick={upsertScreenLoading}\n      disableEscapeKeyDown={upsertScreenLoading}\n    >\n      <DialogTitle>Screen</DialogTitle>\n      {screenLoading ? (\n        <CircularProgress />\n      ) : (\n        <form onSubmit={formik.handleSubmit}>\n          <>\n            <DialogContent>\n              <TextField\n                id=\"key\"\n                className={classes.input}\n                autoFocus\n                label=\"Key\"\n                placeholder=\"A serious key.\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.key}\n                helperText={formik.touched.key ? formik.errors.key : \"\"}\n                error={formik.touched.key && Boolean(formik.errors.key)}\n              />\n              <TextField\n                id=\"name\"\n                className={classes.input}\n                label=\"Name\"\n                placeholder=\"My awesome project!\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.name}\n                helperText={formik.touched.name ? formik.errors.name : \"\"}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n              />\n              <TextField\n                id=\"description\"\n                className={classes.input}\n                multiline\n                rows={3}\n                label=\"Description\"\n                placeholder=\"I'm awesome thats all.\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.description}\n                helperText={\n                  formik.touched.description ? formik.errors.description : \"\"\n                }\n                error={\n                  formik.touched.description &&\n                  Boolean(formik.errors.description)\n                }\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                onClick={() => setOpen(false)}\n                color=\"primary\"\n                disabled={upsertScreenLoading}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                disabled={upsertScreenLoading}\n              >\n                {upsertScreenLoading ? (\n                  <CircularProgress size={10} />\n                ) : screenId ? (\n                  \"Edit\"\n                ) : (\n                  \"Add\"\n                )}\n              </Button>\n            </DialogActions>\n          </>\n        </form>\n      )}\n    </Dialog>\n  );\n};\n\nexport default ScreenFormModal;\n","import gql from \"graphql-tag\";\n\nexport const localesQuery = gql`\n  query LocaleFormModal_locale($id: ID!) {\n    locale(where: { id: $id }) {\n      id\n      name\n      code\n      nativeName\n    }\n  }\n`;\n\nexport const upsertLocaleMutation = gql`\n  mutation LocaleFormModal_upsertLocale(\n    $id: ID\n    $name: String!\n    $nativeName: String!\n    $code: String!\n    $projectId: ID!\n  ) {\n    upsertLocale(\n      data: {\n        name: $name\n        nativeName: $nativeName\n        code: $code\n        projectId: $projectId\n      }\n      where: { id: $id }\n    ) {\n      id\n      name\n      nativeName\n      code\n    }\n  }\n`;\n","import React, { useState } from \"react\";\n\nimport {\n  makeStyles,\n  Theme,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { localesQuery, upsertLocaleMutation } from \"./gql\";\nimport {\n  LocaleFormModal_LocaleQuery,\n  LocaleFormModal_UpsertLocaleMutation,\n} from \"../../../generated/graphql\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport iso from \"iso-639-1\";\n\nconst languages = iso.getAllNames().map((i) => ({\n  code: iso.getCode(i),\n  name: i,\n  nativeName: iso.getNativeName(iso.getCode(i)),\n}));\n\nconst validationSchema = yup.object({\n  code: yup.string().min(1, \"Required\").required(\"Required\"),\n});\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: 400,\n  },\n  input: {\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nconst LocaleFormModal = () => {\n  const [open, setOpen] = useState(true);\n  const history = useHistory();\n  const {\n    params: { localeId, projectId },\n  } = useRouteMatch();\n  const classes = useStyles();\n\n  const [upsertLocale, { loading: upsertLocaleLoading }] = useMutation<\n    LocaleFormModal_UpsertLocaleMutation\n  >(upsertLocaleMutation, { refetchQueries: [\"Screen_project\"] });\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      nativeName: \"\",\n      code: \"\",\n    },\n    validationSchema,\n    onSubmit: async (values) => {\n      console.log({ ...values, id: localeId, projectId });\n      await upsertLocale({ variables: { ...values, id: localeId, projectId } });\n      history.push(`/project/${projectId}/screens`);\n    },\n  });\n\n  const { loading: screenLoading } = useQuery<LocaleFormModal_LocaleQuery>(\n    localesQuery,\n    {\n      variables: { id: localeId },\n      skip: !localeId,\n      onCompleted: (data) => {\n        if (data) {\n          formik.setValues(data.locale);\n        }\n      },\n    }\n  );\n  console.log(formik.values);\n  return (\n    <Dialog\n      classes={{ paper: classes.root }}\n      open={open}\n      onClose={() => setOpen(false)}\n      onExited={() => history.push(`/project/${projectId}/screens`)}\n      disableBackdropClick={upsertLocaleLoading}\n      disableEscapeKeyDown={upsertLocaleLoading}\n    >\n      <DialogTitle>Locale</DialogTitle>\n      {screenLoading ? (\n        <CircularProgress />\n      ) : (\n        <form onSubmit={formik.handleSubmit}>\n          <>\n            <DialogContent>\n              <Autocomplete\n                options={[formik.initialValues, ...languages]}\n                getOptionLabel={(option) => option.name}\n                getOptionSelected={(option) =>\n                  option.code === formik.values.code\n                }\n                onChange={(e, value) =>\n                  formik.setValues(value ? value : formik.initialValues)\n                }\n                value={formik.values}\n                autoSelect\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    autoFocus\n                    placeholder=\"Ex: English\"\n                    variant=\"outlined\"\n                    helperText={formik.touched.code ? formik.errors.code : \"\"}\n                    error={formik.touched.code && Boolean(formik.errors.code)}\n                  />\n                )}\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                onClick={() => setOpen(false)}\n                color=\"primary\"\n                disabled={upsertLocaleLoading}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                disabled={upsertLocaleLoading}\n              >\n                {upsertLocaleLoading ? (\n                  <CircularProgress size={10} />\n                ) : localeId ? (\n                  \"Edit\"\n                ) : (\n                  \"Add\"\n                )}\n              </Button>\n            </DialogActions>\n          </>\n        </form>\n      )}\n    </Dialog>\n  );\n};\n\nexport default LocaleFormModal;\n","import React, { useState } from \"react\";\n\nimport { makeStyles, Theme, Dialog, List, ListItem } from \"@material-ui/core\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: 200,\n  },\n  item: {\n    cursor: \"pointer\",\n  },\n}));\n\nconst ScreenOptionsModal = () => {\n  const [open, setOpen] = useState(true);\n  const history = useHistory();\n  const {\n    params: { screenId, projectId },\n  } = useRouteMatch();\n  const classes = useStyles();\n\n  return (\n    <Dialog\n      classes={{ paper: classes.root }}\n      open={open}\n      onClose={() => setOpen(false)}\n      onExited={() => history.push(`/project/${projectId}/screens`)}\n    >\n      <List>\n        <ListItem\n          className={classes.item}\n          onClick={() =>\n            history.push(`/project/${projectId}/screen/${screenId}/translate`)\n          }\n        >\n          Translate\n        </ListItem>\n        <ListItem\n          className={classes.item}\n          onClick={() =>\n            history.push(`/project/${projectId}/screens/screen/${screenId}`)\n          }\n        >\n          Edit\n        </ListItem>\n      </List>\n    </Dialog>\n  );\n};\n\nexport default ScreenOptionsModal;\n","import React, { useState } from \"react\";\n\nimport AppBar from \"../../../smartComponents/AppBar\";\nimport { makeStyles, Theme, Typography, Chip } from \"@material-ui/core\";\nimport { projectsQuery } from \"./gql\";\nimport { Screen_ProjectQuery } from \"../../../generated/graphql\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useRouteMatch, Route, useHistory } from \"react-router-dom\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ScreenFormModal from \"../ScreenFormModal\";\nimport LocaleFormModal from \"../LocaleFormModal\";\nimport ScreenOptionsModal from \"../ScreenOptionsModal\";\nimport CustomBreadcrumbs from \"../../../components/Breadcrumbs\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.default,\n    height: \"calc(100% - 115px)\",\n  },\n  title: {\n    marginBottom: theme.spacing(3),\n  },\n  projectNameContainer: {\n    marginBottom: theme.spacing(3),\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n\n  screensContainer: {\n    display: \"flex\",\n    flexFlow: \"row wrap\",\n    marginBottom: theme.spacing(3),\n  },\n  screenChip: {\n    minWidth: 225,\n    maxWidth: 225,\n    width: 225,\n    margin: theme.spacing(2),\n    cursor: \"pointer\",\n  },\n  addChip: {\n    cursor: \"pointer\",\n    borderStyle: \"dashed\",\n    color: \"rgba(0, 0, 0, 0.6)\",\n    margin: theme.spacing(2),\n  },\n  screenLoading: {\n    borderRadius: 16,\n    minWidth: 225,\n    maxWidth: 225,\n    width: 225,\n    marginRight: theme.spacing(3),\n  },\n}));\n\nconst ScreenPage = () => {\n  const classes = useStyles();\n  const [search, setSearch] = useState(\"\");\n  const {\n    params: { id },\n  } = useRouteMatch();\n  const history = useHistory();\n\n  const { data: project, loading: projectLoading } = useQuery<\n    Screen_ProjectQuery\n  >(projectsQuery, {\n    variables: { id },\n  });\n\n  return (\n    <>\n      <AppBar\n        search={search}\n        onSearchChange={(e) => setSearch(e.target.value)}\n      />\n      <div className={classes.root}>\n        <CustomBreadcrumbs\n          paths={[{ name: \"Projects\", path: \"/home\" }, { name: \"Screens\" }]}\n        />\n        <div className={classes.projectNameContainer}>\n          {projectLoading ? (\n            <Skeleton animation=\"wave\" variant=\"rect\" width={300} height={55} />\n          ) : (\n            <Typography variant=\"h3\">{project?.project.name}</Typography>\n          )}\n        </div>\n        <div className={classes.screensContainer}>\n          {projectLoading ? (\n            <CustomChip loading />\n          ) : (\n            project?.project?.screens\n              ?.filter((i) =>\n                i.name.toLowerCase().includes(search.toLowerCase())\n              )\n              .map((i) => (\n                <CustomChip\n                  key={i?.id}\n                  name={i?.name}\n                  onClick={() =>\n                    history.push(\n                      `/project/${id}/screens/screen/${i.id}/options`\n                    )\n                  }\n                />\n              ))\n          )}\n          <AddChip\n            onClick={() => history.push(`/project/${id}/screens/screen`)}\n          />\n        </div>\n        <Typography variant=\"h4\" className={classes.title}>\n          Supported Locales\n        </Typography>\n        <div className={classes.screensContainer}>\n          {projectLoading ? (\n            <CustomChip loading />\n          ) : (\n            project?.project?.locales\n              ?.filter((i) =>\n                i.name.toLowerCase().includes(search.toLowerCase())\n              )\n              .map((i) => (\n                <CustomChip\n                  key={i?.id}\n                  name={i?.name}\n                  onClick={() =>\n                    history.push(`/project/${id}/screens/locale/${i.id}`)\n                  }\n                />\n              ))\n          )}\n          <AddChip\n            onClick={() => history.push(`/project/${id}/screens/locale`)}\n          />\n        </div>\n      </div>\n      <Route\n        exact\n        path=\"/project/:projectId/screens/screen\"\n        component={ScreenFormModal}\n      />\n      <Route\n        exact\n        path=\"/project/:projectId/screens/screen/:screenId\"\n        component={ScreenFormModal}\n      />\n      <Route\n        exact\n        path=\"/project/:projectId/screens/screen/:screenId/options\"\n        component={ScreenOptionsModal}\n      />\n      <Route\n        exact\n        path=\"/project/:projectId/screens/locale\"\n        component={LocaleFormModal}\n      />\n      <Route\n        exact\n        path=\"/project/:projectId/screens/locale/:localeId\"\n        component={LocaleFormModal}\n      />\n    </>\n  );\n};\n\ninterface AddChipProps {\n  onClick?: () => void;\n}\n\nconst AddChip: React.SFC<AddChipProps> = ({ onClick }) => {\n  const classes = useStyles();\n\n  return (\n    <Chip\n      className={classes.addChip}\n      onClick={onClick}\n      variant=\"outlined\"\n      avatar={<AddIcon style={{ color: \"rgba(0, 0, 0, 0.23)\" }} />}\n      label=\"Add\"\n    />\n  );\n};\n\ninterface CustomChipProps {\n  name?: string;\n  loading?: boolean;\n  onClick?: () => void;\n}\n\nconst CustomChip: React.SFC<CustomChipProps> = ({ name, loading, onClick }) => {\n  const classes = useStyles();\n  return loading ? (\n    <Skeleton\n      className={classes.screenLoading}\n      variant=\"rect\"\n      width={150}\n      height={32}\n    />\n  ) : (\n    <Chip onClick={onClick} className={classes.screenChip} label={name} />\n  );\n};\n\nexport default ScreenPage;\n","import gql from \"graphql-tag\";\n\nexport const projectQuery = gql`\n  query TranslatePage_project($id: ID!) {\n    project(where: { id: $id }) {\n      locales {\n        id\n        name\n        nativeName\n        code\n      }\n    }\n  }\n`;\n\nexport const screenQuery = gql`\n  query TranslatePage_screen($id: ID!) {\n    screen(where: { id: $id }) {\n      id\n      name\n      description\n      keys {\n        id\n        name\n        plural\n        translations {\n          id\n          value\n          locale {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const deleteKeyMutation = gql`\n  mutation TranslatePage_deleteKey($id: ID!) {\n    deleteKey(where: { id: $id })\n  }\n`;\n","import gql from \"graphql-tag\";\n\nexport const keyQuery = gql`\n  query KeyFormModal_key($id: ID!) {\n    key(where: { id: $id }) {\n      id\n      name\n      plural\n    }\n  }\n`;\n\nexport const upsertKeyMutation = gql`\n  mutation KeyFormModal_upsertKey(\n    $id: ID\n    $name: String!\n    $plural: Boolean!\n    $screenId: ID!\n  ) {\n    upsertKey(\n      data: { name: $name, plural: $plural, screenId: $screenId }\n      where: { id: $id }\n    ) {\n      id\n      name\n      plural\n    }\n  }\n`;\n","import React, { useState } from \"react\";\n\nimport {\n  makeStyles,\n  Theme,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  CircularProgress,\n  FormControlLabel,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { keyQuery, upsertKeyMutation } from \"./gql\";\nimport {\n  KeyFormModal_KeyQuery,\n  KeyFormModal_UpsertKeyMutation,\n} from \"../../../generated/graphql\";\n\nconst validationSchema = yup.object({\n  name: yup\n    .string()\n    .min(1, \"Must be 1 characters or more\")\n    .required(\"Required\"),\n});\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: 400,\n  },\n  input: {\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nconst INITIAL_FORM_VALUES = {\n  name: \"\",\n  plural: false,\n};\n\nconst KeyFormModal = () => {\n  const [open, setOpen] = useState(true);\n  const [createAnother, setCreateAnother] = useState(false);\n  const history = useHistory();\n  const {\n    params: { screenId, projectId, keyId },\n  } = useRouteMatch();\n  const classes = useStyles();\n\n  const [upsertKey, { loading: upsertKeyLoading }] = useMutation<\n    KeyFormModal_UpsertKeyMutation\n  >(upsertKeyMutation, { refetchQueries: [\"TranslatePage_screen\"] });\n\n  const formik = useFormik({\n    initialValues: INITIAL_FORM_VALUES,\n    validationSchema,\n    onSubmit: async (values) => {\n      if (!createAnother) {\n        await upsertKey({ variables: { ...values, id: keyId, screenId } });\n        history.push(`/project/${projectId}/screen/${screenId}/translate`);\n      } else {\n        await upsertKey({ variables: { ...values, id: keyId, screenId } });\n        formik.resetForm();\n      }\n    },\n  });\n\n  const { loading: keyLoading } = useQuery<KeyFormModal_KeyQuery>(keyQuery, {\n    variables: { id: keyId },\n    skip: !keyId,\n    onCompleted: (data) => {\n      if (data) {\n        formik.setValues(data.key);\n      }\n    },\n  });\n  return (\n    <Dialog\n      classes={{ paper: classes.root }}\n      open={open}\n      onClose={() => setOpen(false)}\n      onExited={() =>\n        history.push(`/project/${projectId}/screen/${screenId}/translate`)\n      }\n      disableBackdropClick={upsertKeyLoading}\n      disableEscapeKeyDown={upsertKeyLoading}\n    >\n      <DialogTitle>Key</DialogTitle>\n      {keyLoading ? (\n        <CircularProgress />\n      ) : (\n        <form onSubmit={formik.handleSubmit}>\n          <>\n            <DialogContent>\n              <TextField\n                id=\"name\"\n                className={classes.input}\n                label=\"Name\"\n                placeholder=\"name\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.name}\n                helperText={\n                  formik.touched.name\n                    ? formik.errors.name\n                    : \"No spaces and no periods please.\"\n                }\n                error={formik.touched.name && Boolean(formik.errors.name)}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    id=\"plural\"\n                    value={formik.values.plural}\n                    onChange={formik.handleChange}\n                    checked={formik.values.plural}\n                  />\n                }\n                label=\"Plural\"\n              />\n            </DialogContent>\n            <DialogActions>\n              {!keyId ? (\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      value={createAnother}\n                      onChange={() => setCreateAnother(!createAnother)}\n                      checked={createAnother}\n                    />\n                  }\n                  label=\"Create another\"\n                />\n              ) : null}\n              <Button\n                variant=\"contained\"\n                type=\"submit\"\n                color=\"primary\"\n                disabled={upsertKeyLoading}\n              >\n                {upsertKeyLoading ? (\n                  <CircularProgress size={10} />\n                ) : keyId ? (\n                  \"Edit\"\n                ) : (\n                  \"Add\"\n                )}\n              </Button>\n              <Button\n                onClick={() => setOpen(false)}\n                color=\"primary\"\n                disabled={upsertKeyLoading}\n              >\n                Cancel\n              </Button>\n            </DialogActions>\n          </>\n        </form>\n      )}\n    </Dialog>\n  );\n};\n\nexport default KeyFormModal;\n","import gql from \"graphql-tag\";\n\nexport const translationQuery = gql`\n  query TranslationFormModal_translation($id: ID!) {\n    translation(where: { id: $id }) {\n      id\n      value\n    }\n  }\n`;\n\nexport const upsertTranslationMutation = gql`\n  mutation TranslationFormModal_upsertTranslation(\n    $id: ID\n    $value: String!\n    $keyId: ID!\n    $localeId: ID!\n  ) {\n    upsertTranslation(\n      data: { value: $value, keyId: $keyId, localeId: $localeId }\n      where: { id: $id }\n    ) {\n      id\n      value\n    }\n  }\n`;\n","import React, { useState } from \"react\";\n\nimport {\n  makeStyles,\n  Theme,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { translationQuery, upsertTranslationMutation } from \"./gql\";\nimport {\n  TranslationFormModal_TranslationQuery,\n  TranslationFormModal_UpsertTranslationMutation,\n} from \"../../../generated/graphql\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .string()\n    .min(1, \"Must be 1 characters or more\")\n    .required(\"Required\"),\n});\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: 400,\n  },\n  input: {\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nconst TranslationFormModal = () => {\n  const [open, setOpen] = useState(true);\n  const history = useHistory();\n  const {\n    params: { screenId, projectId, keyId, translationId, localeId },\n  } = useRouteMatch();\n  const classes = useStyles();\n\n  const [\n    upsertTranslation,\n    { loading: upsertTranslationLoading },\n  ] = useMutation<TranslationFormModal_UpsertTranslationMutation>(\n    upsertTranslationMutation,\n    { refetchQueries: [\"TranslatePage_screen\"] }\n  );\n  const formik = useFormik({\n    initialValues: {\n      value: \"\",\n    },\n    validationSchema,\n    onSubmit: async (values) => {\n      await upsertTranslation({\n        variables: { ...values, id: translationId, keyId, localeId },\n      });\n      history.push(`/project/${projectId}/screen/${screenId}/translate`);\n    },\n  });\n\n  const { loading: translationLoading } = useQuery<\n    TranslationFormModal_TranslationQuery\n  >(translationQuery, {\n    variables: { id: translationId },\n    skip: !translationId,\n    onCompleted: (data) => {\n      if (data) {\n        formik.setValues(data.translation);\n      }\n    },\n  });\n  return (\n    <Dialog\n      classes={{ paper: classes.root }}\n      open={open}\n      onClose={() => setOpen(false)}\n      onExited={() =>\n        history.push(`/project/${projectId}/screen/${screenId}/translate`)\n      }\n      disableBackdropClick={upsertTranslationLoading}\n      disableEscapeKeyDown={upsertTranslationLoading}\n    >\n      <DialogTitle>Translation</DialogTitle>\n      {translationLoading ? (\n        <CircularProgress />\n      ) : (\n        <form onSubmit={formik.handleSubmit}>\n          <>\n            <DialogContent>\n              <TextField\n                id=\"value\"\n                className={classes.input}\n                autoFocus\n                rows={4}\n                multiline\n                label=\"Value\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={formik.handleChange}\n                value={formik.values.value}\n                helperText={formik.touched.value ? formik.errors.value : \"\"}\n                error={formik.touched.value && Boolean(formik.errors.value)}\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                onClick={() => setOpen(false)}\n                color=\"primary\"\n                disabled={upsertTranslationLoading}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                disabled={upsertTranslationLoading}\n              >\n                {upsertTranslationLoading ? (\n                  <CircularProgress size={10} />\n                ) : translationId ? (\n                  \"Edit\"\n                ) : (\n                  \"Add\"\n                )}\n              </Button>\n            </DialogActions>\n          </>\n        </form>\n      )}\n    </Dialog>\n  );\n};\n\nexport default TranslationFormModal;\n","import React, { useState } from \"react\";\n\nimport AppBar from \"../../../smartComponents/AppBar\";\nimport {\n  makeStyles,\n  Theme,\n  TextField,\n  IconButton,\n  Button,\n  Typography,\n  Chip,\n} from \"@material-ui/core\";\nimport { useRouteMatch, useHistory, Route } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { projectQuery, screenQuery, deleteKeyMutation } from \"./gql\";\nimport {\n  TranslatePage_ProjectQuery,\n  TranslatePage_ScreenQuery,\n  TranslatePage_DeleteKeyMutation,\n} from \"../../../generated/graphql\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport omit from \"lodash/omit\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport clsx from \"clsx\";\n\nimport KeyFormModal from \"../KeyFormModal\";\nimport TranslationFormModal from \"../TranslationFormModal\";\nimport CustomBreadcrumbs from \"../../../components/Breadcrumbs\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.default,\n    height: \"calc(100% - 115px)\",\n  },\n  languages: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  languageField: {\n    width: 300,\n  },\n  switchButton: {\n    margin: theme.spacing(3),\n  },\n  actionsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginBottom: theme.spacing(3),\n  },\n  screenTitle: {\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  screenDescription: {\n    margin: theme.spacing(3),\n  },\n  keyItem: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    border: \"1px solid #eee\",\n  },\n  keyTitleContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: \"#eee\",\n    padding: 12,\n  },\n  keyTitle: {\n    color: \"cornflowerblue\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  translationsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: 200,\n  },\n  translationContainer: {\n    width: \"50%\",\n    height: \"100%\",\n    cursor: \"pointer\",\n  },\n  translation: {\n    padding: theme.spacing(1),\n    cursor: \"pointer\",\n  },\n  leftContainer: { height: \"100%\" },\n  rightContainer: {\n    backgroundColor: \"white\",\n    height: \"100%\",\n  },\n  spacer: { flex: 2 },\n  noTranslation: {\n    color: \"rgba(0,0,0,0.4)\",\n    padding: theme.spacing(1),\n  },\n}));\n\nconst INITIAL_LANGUAGE = {\n  id: \"\",\n  code: \"\",\n  nativeName: \"\",\n  name: \"\",\n};\n\nconst ScreenPage = () => {\n  const classes = useStyles();\n  const [search, setSearch] = useState(\"\");\n  const [leftLanguage, setLeftLanguage] = useState(INITIAL_LANGUAGE);\n  const [rightLanguage, setRightLanguage] = useState(INITIAL_LANGUAGE);\n  const {\n    params: { projectId, screenId },\n  } = useRouteMatch();\n  const history = useHistory();\n  const { data: project, loading: projectLoading } = useQuery<\n    TranslatePage_ProjectQuery\n  >(projectQuery, {\n    variables: { id: projectId },\n  });\n\n  const { data: screen } = useQuery<TranslatePage_ScreenQuery>(screenQuery, {\n    variables: { id: screenId },\n    skip: !screenId,\n  });\n\n  const [deleteKey] = useMutation<TranslatePage_DeleteKeyMutation>(\n    deleteKeyMutation,\n    { refetchQueries: [\"TranslatePage_screen\"] }\n  );\n\n  return (\n    <>\n      <AppBar\n        search={search}\n        onSearchChange={(e) => setSearch(e.target.value)}\n      />\n      <div className={classes.root}>\n        <CustomBreadcrumbs\n          paths={[\n            { name: \"Projects\", path: \"/home\" },\n            { name: \"Screens\", path: `/project/${projectId}/screens` },\n            { name: \"Translate\" },\n          ]}\n        />\n        <Typography className={classes.screenTitle} variant=\"h3\">\n          {screen?.screen?.name}\n        </Typography>\n        <Typography className={classes.screenDescription}>\n          {screen?.screen?.description}\n        </Typography>\n        {!projectLoading ? (\n          <div className={classes.languages}>\n            <Autocomplete\n              className={classes.languageField}\n              disableClearable\n              options={project?.project.locales ?? []}\n              getOptionLabel={(option) => option.name}\n              getOptionSelected={(option) =>\n                leftLanguage ? option.code === leftLanguage.code : false\n              }\n              onChange={(e, value) =>\n                setLeftLanguage(value ?? INITIAL_LANGUAGE)\n              }\n              value={leftLanguage}\n              autoSelect\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  autoFocus\n                  placeholder=\"Ex: English\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n            <IconButton\n              className={classes.switchButton}\n              onClick={() => {\n                setLeftLanguage(rightLanguage);\n                setRightLanguage(leftLanguage);\n              }}\n            >\n              <CodeIcon />\n            </IconButton>\n            <Autocomplete\n              className={classes.languageField}\n              disableClearable\n              options={project?.project.locales ?? []}\n              getOptionLabel={(option) => option.name}\n              getOptionSelected={(option) => option.code === rightLanguage.code}\n              onChange={(e, value) =>\n                setRightLanguage(omit(value, \"__typename\") ?? INITIAL_LANGUAGE)\n              }\n              value={rightLanguage}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  autoFocus\n                  placeholder=\"Ex: English\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </div>\n        ) : null}\n        {leftLanguage.code.length > 0 && rightLanguage.code.length > 0 ? (\n          <>\n            <div className={classes.actionsContainer}>\n              <Button\n                color=\"primary\"\n                onClick={() =>\n                  history.push(\n                    `/project/${projectId}/screen/${screenId}/translate/key`\n                  )\n                }\n                startIcon={<AddIcon />}\n                variant=\"contained\"\n              >\n                Add\n              </Button>\n            </div>\n            {screen?.screen.keys\n              .filter((i) =>\n                i.name.toLowerCase().includes(search.toLowerCase())\n              )\n              .reverse()\n              .map((i) => {\n                const filteredLeftTranslation = i.translations.filter(\n                  (x) => x.locale.id === leftLanguage.id\n                );\n                const leftTranslation =\n                  filteredLeftTranslation.length > 0\n                    ? filteredLeftTranslation[0]\n                    : null;\n\n                const filteredRightTranslation = i.translations.filter(\n                  (x) => x.locale.id === rightLanguage.id\n                );\n                const rightTranslation =\n                  filteredRightTranslation.length > 0\n                    ? filteredRightTranslation[0]\n                    : null;\n                return (\n                  <KeyItem\n                    key={i.id}\n                    k={i.name}\n                    plural={i.plural}\n                    leftTranslation={leftTranslation}\n                    rightTranslation={rightTranslation}\n                    onKeyClick={() =>\n                      history.push(\n                        `/project/${projectId}/screen/${screenId}/translate/key/${i.id}`\n                      )\n                    }\n                    leftLanguage={leftLanguage}\n                    rightLanguage={rightLanguage}\n                    onLeftLanguageClick={() =>\n                      leftTranslation\n                        ? history.push(\n                            `/project/${projectId}/screen/${screenId}/translate/key/${i.id}/locale/${leftLanguage.id}/translation/${leftTranslation.id}`\n                          )\n                        : history.push(\n                            `/project/${projectId}/screen/${screenId}/translate/key/${i.id}/locale/${leftLanguage.id}/translation`\n                          )\n                    }\n                    onRightLanguageClick={() =>\n                      rightTranslation\n                        ? history.push(\n                            `/project/${projectId}/screen/${screenId}/translate/key/${i.id}/locale/${rightLanguage.id}/translation/${rightTranslation.id}`\n                          )\n                        : history.push(\n                            `/project/${projectId}/screen/${screenId}/translate/key/${i.id}/locale/${rightLanguage.id}/translation`\n                          )\n                    }\n                    onDeleteKey={async () =>\n                      await deleteKey({ variables: { id: i.id } })\n                    }\n                  />\n                );\n              })}\n          </>\n        ) : null}\n      </div>\n      <Route\n        exact\n        path=\"/project/:projectId/screen/:screenId/translate/key\"\n        component={KeyFormModal}\n      />\n      <Route\n        exact\n        path=\"/project/:projectId/screen/:screenId/translate/key/:keyId\"\n        component={KeyFormModal}\n      />\n      <Route\n        exact\n        path=\"/project/:projectId/screen/:screenId/translate/key/:keyId/locale/:localeId/translation\"\n        component={TranslationFormModal}\n      />\n      <Route\n        exact\n        path=\"/project/:projectId/screen/:screenId/translate/key/:keyId/locale/:localeId/translation/:translationId\"\n        component={TranslationFormModal}\n      />\n    </>\n  );\n};\n\nconst KeyItem = ({\n  k,\n  leftTranslation,\n  rightTranslation,\n  rightLanguage,\n  leftLanguage,\n  plural,\n  onKeyClick,\n  onLeftLanguageClick,\n  onRightLanguageClick,\n  onDeleteKey,\n}: any) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.keyItem}>\n      <div className={classes.keyTitleContainer}>\n        <Typography onClick={onKeyClick} className={classes.keyTitle}>\n          {k}\n        </Typography>\n        <div className={classes.spacer} />\n        {plural ? <Chip label=\"PLURAL\" color=\"secondary\" /> : null}\n        <IconButton onClick={onDeleteKey}>\n          <DeleteIcon />\n        </IconButton>\n      </div>\n      <div className={classes.translationsContainer}>\n        <div\n          className={clsx(classes.translationContainer, classes.leftContainer)}\n          onClick={onLeftLanguageClick}\n        >\n          {leftTranslation ? (\n            <Typography className={classes.translation}>\n              {leftTranslation.value}\n            </Typography>\n          ) : (\n            <Typography className={classes.noTranslation}>\n              Click to translate to {leftLanguage.name}\n            </Typography>\n          )}\n        </div>\n        <div\n          className={clsx(classes.translationContainer, classes.rightContainer)}\n          onClick={onRightLanguageClick}\n        >\n          {rightTranslation ? (\n            <Typography className={classes.translation}>\n              {rightTranslation.value}\n            </Typography>\n          ) : (\n            <Typography className={classes.noTranslation}>\n              Click to translate to {rightLanguage.name}\n            </Typography>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScreenPage;\n","import React from \"react\";\nimport { makeStyles, CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    background: \"linear-gradient(to right, #3a6073, #3a7bd5)\",\n    float: \"right\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  image: {\n    filter: \"brightness(100)\",\n    width: 250,\n  },\n  progress: {\n    color: \"white\",\n  },\n});\n\nconst LoadingPage: React.SFC<{}> = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <img className={classes.image} src=\"/softgarden_white.png\" alt=\"\" />\n      <CircularProgress className={classes.progress} size={22} />\n    </div>\n  );\n};\n\nexport default LoadingPage;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { UserContext } from \"./context/UserContext\";\nimport PublicFrame from \"./pages/Public\";\nimport Home from \"./pages/Private/Home\";\nimport Settings from \"./pages/Private/Settings\";\nimport Screen from \"./pages/Private/Screen\";\nimport Translate from \"./pages/Private/Translate\";\nimport Loading from \"./Loading\";\n\nconst RedirectRoute = (to: string) => {\n  return () => <Redirect to={to} />;\n};\n\nfunction PublicRouter() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={PublicFrame} />\n      </Switch>\n    </Router>\n  );\n}\nfunction PrivateRouter() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={RedirectRoute(\"/home\")} />\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/project/:id/screens\" component={Screen} />\n        <Route\n          path=\"/project/:projectId/screen/:screenId/translate\"\n          component={Translate}\n        />\n        <Redirect to=\"/home\" />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction App() {\n  const { user } = useContext(UserContext);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (user?.accessToken) {\n      setIsLoggedIn(true);\n    } else {\n      setIsLoggedIn(false);\n    }\n    setIsLoading(false);\n  }, [user]);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n  return isLoggedIn ? <PrivateRouter /> : <PublicRouter />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport client from \"./apollo\";\nimport App from \"./App\";\nimport { UserProvider } from \"./context/UserContext\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\n\nconsole.log(process.env.REACT_APP_ACCESS_TOKEN_SECRET);\nconsole.log(process.env.REACT_APP_API_BASE_URL);\nconsole.log(process.env.NODE_ENV);\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <UserProvider>\n      <App />\n    </UserProvider>\n  </ApolloProvider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}